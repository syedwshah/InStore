{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { createNavigationContainer, createNavigator, TabRouter } from 'react-navigation';\nimport TabView from \"./views/TabView\";\nimport TabBarTop from \"./views/TabBarTop\";\nimport TabBarBottom from \"./views/TabBarBottom\";\n\nvar createTabNavigator = function createTabNavigator(routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var tabsConfig = _objectSpread({}, createTabNavigator.Presets.Default, {}, config);\n\n  var router = TabRouter(routeConfigs, tabsConfig);\n  var navigator = createNavigator(TabView, router, tabsConfig);\n  return createNavigationContainer(navigator);\n};\n\nvar Presets = {\n  iOSBottomTabs: {\n    tabBarComponent: TabBarBottom,\n    tabBarPosition: 'bottom',\n    swipeEnabled: false,\n    animationEnabled: false,\n    initialLayout: undefined\n  },\n  AndroidTopTabs: {\n    tabBarComponent: TabBarTop,\n    tabBarPosition: 'top',\n    swipeEnabled: true,\n    animationEnabled: true,\n    initialLayout: undefined\n  }\n};\ncreateTabNavigator.Presets = {\n  iOSBottomTabs: Presets.iOSBottomTabs,\n  AndroidTopTabs: Presets.AndroidTopTabs,\n  Default: Platform.OS === 'ios' ? Presets.iOSBottomTabs : Presets.AndroidTopTabs\n};\nexport default createTabNavigator;","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-deprecated-tab-navigator/src/createTabNavigator.js"],"names":["React","createNavigationContainer","createNavigator","TabRouter","TabView","TabBarTop","TabBarBottom","createTabNavigator","routeConfigs","config","tabsConfig","Presets","Default","router","navigator","iOSBottomTabs","tabBarComponent","tabBarPosition","swipeEnabled","animationEnabled","initialLayout","undefined","AndroidTopTabs","Platform","OS"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SACEC,yBADF,EAEEC,eAFF,EAGEC,SAHF,QAIO,kBAJP;AAMA,OAAOC,OAAP;AACA,OAAOC,SAAP;AACA,OAAOC,YAAP;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,YAAD,EAA+B;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;;AAExD,MAAMC,UAAU,qBAAQH,kBAAkB,CAACI,OAAnB,CAA2BC,OAAnC,MAA+CH,MAA/C,CAAhB;;AAEA,MAAMI,MAAM,GAAGV,SAAS,CAACK,YAAD,EAAeE,UAAf,CAAxB;AAEA,MAAMI,SAAS,GAAGZ,eAAe,CAACE,OAAD,EAAUS,MAAV,EAAkBH,UAAlB,CAAjC;AAEA,SAAOT,yBAAyB,CAACa,SAAD,CAAhC;AACD,CATD;;AAWA,IAAMH,OAAO,GAAG;AACdI,EAAAA,aAAa,EAAE;AACbC,IAAAA,eAAe,EAAEV,YADJ;AAEbW,IAAAA,cAAc,EAAE,QAFH;AAGbC,IAAAA,YAAY,EAAE,KAHD;AAIbC,IAAAA,gBAAgB,EAAE,KAJL;AAKbC,IAAAA,aAAa,EAAEC;AALF,GADD;AAQdC,EAAAA,cAAc,EAAE;AACdN,IAAAA,eAAe,EAAEX,SADH;AAEdY,IAAAA,cAAc,EAAE,KAFF;AAGdC,IAAAA,YAAY,EAAE,IAHA;AAIdC,IAAAA,gBAAgB,EAAE,IAJJ;AAKdC,IAAAA,aAAa,EAAEC;AALD;AARF,CAAhB;AAmCAd,kBAAkB,CAACI,OAAnB,GAA6B;AAC3BI,EAAAA,aAAa,EAAEJ,OAAO,CAACI,aADI;AAE3BO,EAAAA,cAAc,EAAEX,OAAO,CAACW,cAFG;AAG3BV,EAAAA,OAAO,EACLW,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBb,OAAO,CAACI,aAAhC,GAAgDJ,OAAO,CAACW;AAJ/B,CAA7B;AAOA,eAAef,kBAAf","sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  createNavigationContainer,\n  createNavigator,\n  TabRouter,\n} from 'react-navigation';\n\nimport TabView from './views/TabView';\nimport TabBarTop from './views/TabBarTop';\nimport TabBarBottom from './views/TabBarBottom';\n\nconst createTabNavigator = (routeConfigs, config = {}) => {\n  // Use the look native to the platform by default\n  const tabsConfig = { ...createTabNavigator.Presets.Default, ...config };\n\n  const router = TabRouter(routeConfigs, tabsConfig);\n\n  const navigator = createNavigator(TabView, router, tabsConfig);\n\n  return createNavigationContainer(navigator);\n};\n\nconst Presets = {\n  iOSBottomTabs: {\n    tabBarComponent: TabBarBottom,\n    tabBarPosition: 'bottom',\n    swipeEnabled: false,\n    animationEnabled: false,\n    initialLayout: undefined,\n  },\n  AndroidTopTabs: {\n    tabBarComponent: TabBarTop,\n    tabBarPosition: 'top',\n    swipeEnabled: true,\n    animationEnabled: true,\n    initialLayout: undefined,\n  },\n};\n\n/**\n * Use these to get Android-style top tabs even on iOS or vice versa.\n *\n * Example:\n * ```\n * const HomeScreencreateTabNavigator = createTabNavigator({\n *  Chat: {\n *    screen: ChatScreen,\n *  },\n *  ...\n * }, {\n *  ...createTabNavigator.Presets.AndroidTopTabs,\n *  tabBarOptions: {\n *    ...\n *  },\n * });\n *```\n */\ncreateTabNavigator.Presets = {\n  iOSBottomTabs: Presets.iOSBottomTabs,\n  AndroidTopTabs: Presets.AndroidTopTabs,\n  Default:\n    Platform.OS === 'ios' ? Presets.iOSBottomTabs : Presets.AndroidTopTabs,\n};\n\nexport default createTabNavigator;\n"]},"metadata":{},"sourceType":"module"}