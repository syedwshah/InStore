{"ast":null,"code":"import I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport getSceneIndicesForInterpolationInputRange from \"../../utils/getSceneIndicesForInterpolationInputRange\";\n\nfunction forInitial(props) {\n  var navigation = props.navigation,\n      scene = props.scene;\n  var focused = navigation.state.index === scene.index;\n  var opacity = focused ? 1 : 0;\n  var translate = focused ? 0 : 1000000;\n  return {\n    opacity: opacity,\n    transform: [{\n      translateX: translate\n    }, {\n      translateY: translate\n    }]\n  };\n}\n\nfunction forHorizontal(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, first + 0.01, index, last - 0.01, last],\n    outputRange: [0, 1, 1, 0.85, 0]\n  });\n  var width = layout.initWidth;\n  var translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3]\n  });\n  var translateY = 0;\n  return {\n    opacity: opacity,\n    transform: [{\n      translateX: translateX\n    }, {\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forVertical(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, first + 0.01, index, last - 0.01, last],\n    outputRange: [0, 1, 1, 0.85, 0]\n  });\n  var height = layout.initHeight;\n  var translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0]\n  });\n  var translateX = 0;\n  return {\n    opacity: opacity,\n    transform: [{\n      translateX: translateX\n    }, {\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFadeFromBottomAndroid(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var inputRange = [first, index, last - 0.01, last];\n  var opacity = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [0, 1, 1, 0]\n  });\n  var translateY = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [50, 0, 0, 0]\n  });\n  var translateX = 0;\n  return {\n    opacity: opacity,\n    transform: [{\n      translateX: translateX\n    }, {\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFade(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1]\n  });\n  return {\n    opacity: opacity\n  };\n}\n\nexport default {\n  forHorizontal: forHorizontal,\n  forVertical: forVertical,\n  forFadeFromBottomAndroid: forFadeFromBottomAndroid,\n  forFade: forFade\n};","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/StackView/StackViewStyleInterpolator.js"],"names":["getSceneIndicesForInterpolationInputRange","forInitial","props","navigation","scene","focused","state","index","opacity","translate","transform","translateX","translateY","forHorizontal","layout","position","isMeasured","interpolate","first","last","inputRange","outputRange","width","initWidth","I18nManager","isRTL","forVertical","height","initHeight","forFadeFromBottomAndroid","forFade"],"mappings":"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","sourcesContent":["import { I18nManager } from 'react-native';\nimport getSceneIndicesForInterpolationInputRange from '../../utils/getSceneIndicesForInterpolationInputRange';\n\n/**\n * Utility that builds the style for the card in the cards stack.\n *\n *     +------------+\n *   +-+            |\n * +-+ |            |\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n */\n\n/**\n * Render the initial style when the initial layout isn't measured yet.\n */\nfunction forInitial(props) {\n  const { navigation, scene } = props;\n\n  const focused = navigation.state.index === scene.index;\n  const opacity = focused ? 1 : 0;\n  // If not focused, move the scene far away.\n  const translate = focused ? 0 : 1000000;\n  return {\n    opacity,\n    transform: [{ translateX: translate }, { translateY: translate }],\n  };\n}\n\n/**\n * Standard iOS-style slide in from the right.\n */\nfunction forHorizontal(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, first + 0.01, index, last - 0.01, last],\n    outputRange: [0, 1, 1, 0.85, 0],\n  });\n\n  const width = layout.initWidth;\n  const translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL\n      ? [-width, 0, width * 0.3]\n      : [width, 0, width * -0.3],\n  });\n  const translateY = 0;\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }],\n  };\n}\n\n/**\n * Standard iOS-style slide in from the bottom (used for modals).\n */\nfunction forVertical(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, first + 0.01, index, last - 0.01, last],\n    outputRange: [0, 1, 1, 0.85, 0],\n  });\n\n  const height = layout.initHeight;\n  const translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0],\n  });\n  const translateX = 0;\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }],\n  };\n}\n\n/**\n * Standard Android-style fade in from the bottom.\n */\nfunction forFadeFromBottomAndroid(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const inputRange = [first, index, last - 0.01, last];\n\n  const opacity = position.interpolate({\n    inputRange,\n    outputRange: [0, 1, 1, 0],\n  });\n\n  const translateY = position.interpolate({\n    inputRange,\n    outputRange: [50, 0, 0, 0],\n  });\n  const translateX = 0;\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }],\n  };\n}\n\n/**\n *  fadeIn and fadeOut\n */\nfunction forFade(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1],\n  });\n\n  return {\n    opacity,\n  };\n}\n\nexport default {\n  forHorizontal,\n  forVertical,\n  forFadeFromBottomAndroid,\n  forFade,\n};\n"]},"metadata":{},"sourceType":"module"}