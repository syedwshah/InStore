{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/withNavigationFocus.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from \"../utils/invariant\";\nimport withNavigation from \"./withNavigation\";\nexport default function withNavigationFocus(Component) {\n  var ComponentWithNavigationFocus = function (_React$Component) {\n    _inherits(ComponentWithNavigationFocus, _React$Component);\n\n    var _super = _createSuper(ComponentWithNavigationFocus);\n\n    function ComponentWithNavigationFocus(props) {\n      var _this;\n\n      _classCallCheck(this, ComponentWithNavigationFocus);\n\n      _this = _super.call(this, props);\n      _this.state = {\n        isFocused: props.navigation ? props.navigation.isFocused() : false\n      };\n      return _this;\n    }\n\n    _createClass(ComponentWithNavigationFocus, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var navigation = this.props.navigation;\n        invariant(!!navigation, 'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.');\n        this.subscriptions = [navigation.addListener('didFocus', function () {\n          return _this2.setState({\n            isFocused: true\n          });\n        }), navigation.addListener('willBlur', function () {\n          return _this2.setState({\n            isFocused: false\n          });\n        })];\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.subscriptions.forEach(function (sub) {\n          return sub.remove();\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(Component, _extends({}, this.props, {\n          isFocused: this.state.isFocused,\n          ref: this.props.onRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return ComponentWithNavigationFocus;\n  }(React.Component);\n\n  ComponentWithNavigationFocus.displayName = \"withNavigationFocus(\" + (Component.displayName || Component.name) + \")\";\n  return hoistStatics(withNavigation(ComponentWithNavigationFocus), Component);\n}","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/withNavigationFocus.js"],"names":["React","propTypes","hoistStatics","invariant","withNavigation","withNavigationFocus","Component","ComponentWithNavigationFocus","props","state","isFocused","navigation","subscriptions","addListener","setState","forEach","sub","remove","onRef","displayName","name"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,SAAP;AACA,OAAOC,cAAP;AAEA,eAAe,SAASC,mBAAT,CAA6BC,SAA7B,EAAwC;AAAA,MAC/CC,4BAD+C;AAAA;;AAAA;;AAKnD,0CAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gCAAMA,KAAN;AAEA,YAAKC,KAAL,GAAa;AACXC,QAAAA,SAAS,EAAEF,KAAK,CAACG,UAAN,GAAmBH,KAAK,CAACG,UAAN,CAAiBD,SAAjB,EAAnB,GAAkD;AADlD,OAAb;AAHiB;AAMlB;;AAXkD;AAAA;AAAA,0CAa/B;AAAA;;AAAA,YACVC,UADU,GACK,KAAKH,KADV,CACVG,UADU;AAElBR,QAAAA,SAAS,CACP,CAAC,CAACQ,UADK,EAEP,6JAFO,CAAT;AAKA,aAAKC,aAAL,GAAqB,CACnBD,UAAU,CAACE,WAAX,CAAuB,UAAvB,EAAmC;AAAA,iBACjC,MAAI,CAACC,QAAL,CAAc;AAAEJ,YAAAA,SAAS,EAAE;AAAb,WAAd,CADiC;AAAA,SAAnC,CADmB,EAInBC,UAAU,CAACE,WAAX,CAAuB,UAAvB,EAAmC;AAAA,iBACjC,MAAI,CAACC,QAAL,CAAc;AAAEJ,YAAAA,SAAS,EAAE;AAAb,WAAd,CADiC;AAAA,SAAnC,CAJmB,CAArB;AAQD;AA5BkD;AAAA;AAAA,6CA8B5B;AACrB,aAAKE,aAAL,CAAmBG,OAAnB,CAA2B,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAACC,MAAJ,EAAJ;AAAA,SAA9B;AACD;AAhCkD;AAAA;AAAA,+BAkC1C;AACP,eACE,oBAAC,SAAD,eACM,KAAKT,KADX;AAEE,UAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,SAFxB;AAGE,UAAA,GAAG,EAAE,KAAKF,KAAL,CAAWU,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD;AA1CkD;;AAAA;AAAA,IACVlB,KAAK,CAACM,SADI;;AAC/CC,EAAAA,4BAD+C,CAE5CY,WAF4C,6BAEPb,SAAS,CAACa,WAAV,IAC1Cb,SAAS,CAACc,IAHuC;AA6CrD,SAAOlB,YAAY,CAACE,cAAc,CAACG,4BAAD,CAAf,EAA+CD,SAA/C,CAAnB;AACD","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from '../utils/invariant';\nimport withNavigation from './withNavigation';\n\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    static displayName = `withNavigationFocus(${Component.displayName ||\n      Component.name})`;\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        isFocused: props.navigation ? props.navigation.isFocused() : false,\n      };\n    }\n\n    componentDidMount() {\n      const { navigation } = this.props;\n      invariant(\n        !!navigation,\n        'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.'\n      );\n\n      this.subscriptions = [\n        navigation.addListener('didFocus', () =>\n          this.setState({ isFocused: true })\n        ),\n        navigation.addListener('willBlur', () =>\n          this.setState({ isFocused: false })\n        ),\n      ];\n    }\n\n    componentWillUnmount() {\n      this.subscriptions.forEach(sub => sub.remove());\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          isFocused={this.state.isFocused}\n          ref={this.props.onRef}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(withNavigation(ComponentWithNavigationFocus), Component);\n}\n"]},"metadata":{},"sourceType":"module"}