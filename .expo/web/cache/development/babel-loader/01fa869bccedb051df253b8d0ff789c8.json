{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/TouchableItem.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\n\nvar TouchableItem = function (_React$Component) {\n  _inherits(TouchableItem, _React$Component);\n\n  var _super = _createSuper(TouchableItem);\n\n  function TouchableItem() {\n    _classCallCheck(this, TouchableItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TouchableItem, [{\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n        var _this$props = this.props,\n            style = _this$props.style,\n            rest = _objectWithoutProperties(_this$props, [\"style\"]);\n\n        return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n          style: null,\n          background: TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 9\n          }\n        }), React.createElement(View, {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }\n        }, React.Children.only(this.props.children)));\n      }\n\n      return React.createElement(TouchableOpacity, _extends({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }\n      }), this.props.children);\n    }\n  }]);\n\n  return TouchableItem;\n}(React.Component);\n\nTouchableItem.defaultProps = {\n  borderless: false,\n  pressColor: 'rgba(0, 0, 0, .32)'\n};\nexport { TouchableItem as default };","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/TouchableItem.js"],"names":["React","ANDROID_VERSION_LOLLIPOP","TouchableItem","Platform","OS","Version","props","style","rest","TouchableNativeFeedback","Ripple","pressColor","borderless","Children","only","children","Component","defaultProps"],"mappings":";;;;;;;;;;;;;AASA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAQA,IAAMC,wBAAwB,GAAG,EAAjC;;IAEqBC,a;;;;;;;;;;;;;6BAMV;AASP,UACEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IACAD,QAAQ,CAACE,OAAT,IAAoBJ,wBAFtB,EAGE;AAAA,0BAC2B,KAAKK,KADhC;AAAA,YACQC,KADR,eACQA,KADR;AAAA,YACkBC,IADlB;;AAEA,eACE,oBAAC,uBAAD,eACMA,IADN;AAEE,UAAA,KAAK,EAAE,IAFT;AAGE,UAAA,UAAU,EAAEC,uBAAuB,CAACC,MAAxB,CACV,KAAKJ,KAAL,CAAWK,UADD,EAEV,KAAKL,KAAL,CAAWM,UAFD,CAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAqBP,KAAK,CAACa,QAAN,CAAeC,IAAf,CAAoB,KAAKR,KAAL,CAAWS,QAA/B,CAArB,CARF,CADF;AAYD;;AAED,aACE,oBAAC,gBAAD,eAAsB,KAAKT,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAmC,KAAKA,KAAL,CAAWS,QAA9C,CADF;AAGD;;;;EArCwCf,KAAK,CAACgB,S;;AAA5Bd,a,CACZe,Y,GAAe;AACpBL,EAAAA,UAAU,EAAE,KADQ;AAEpBD,EAAAA,UAAU,EAAE;AAFQ,C;SADHT,a","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, ...rest } = this.props;\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          style={null}\n          background={TouchableNativeFeedback.Ripple(\n            this.props.pressColor,\n            this.props.borderless\n          )}\n        >\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableOpacity {...this.props}>{this.props.children}</TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}