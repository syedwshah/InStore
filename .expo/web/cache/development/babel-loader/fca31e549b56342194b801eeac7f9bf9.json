{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport NavigationActions from \"../NavigationActions\";\nimport StackActions from \"./StackActions\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport { createPathParser } from \"./pathUtils\";\n\nvar defaultActionCreators = function defaultActionCreators(route, navStateKey) {\n  return {};\n};\n\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [NavigationActions.SET_PARAMS, StackActions.COMPLETE_TRANSITION].includes(actionType);\n}\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    var routeConfig = routeConfigs[routeName];\n    childRouters[routeName] = null;\n    var screen = getScreenForRouteName(routeConfigs, routeName);\n\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  var _createPathParser = createPathParser(childRouters, routeConfigs, config.paths),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\" + initialRouteName + \"'.\" + (\"Should be one of \" + order.map(function (n) {\n      return \"\\\"\" + n + \"\\\"\";\n    }).join(', ')));\n  }\n\n  function resetChildRoute(routeName) {\n    var params = routeName === initialRouteName ? initialRouteParams : undefined;\n    var childRouter = childRouters[routeName];\n\n    if (childRouter) {\n      var childAction = NavigationActions.init();\n      return _objectSpread({}, childRouter.getStateForAction(childAction), {\n        key: routeName,\n        routeName: routeName,\n        params: params\n      });\n    }\n\n    return {\n      key: routeName,\n      routeName: routeName,\n      params: params\n    };\n  }\n\n  function getNextState(prevState, possibleNextState) {\n    if (!prevState) {\n      return possibleNextState;\n    }\n\n    var nextState;\n\n    if (prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n\n      var nextRoutes = _toConsumableArray(possibleNextState.routes);\n\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      return _objectSpread({}, possibleNextState, {\n        routes: nextRoutes\n      });\n    } else {\n      nextState = possibleNextState;\n    }\n\n    return nextState;\n  }\n\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    return {\n      routes: routes,\n      index: initialRouteIndex,\n      isTransitioning: false\n    };\n  }\n\n  return {\n    childRouters: childRouters,\n    getActionCreators: function getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _objectSpread({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        var params = action.params;\n\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _objectSpread({}, route, {\n              params: _objectSpread({}, route.params, {}, params, {}, route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n\n        if (!activeChildState && inputState) {\n          return null;\n        }\n\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var _routes = _toConsumableArray(state.routes);\n\n          _routes[state.index] = activeChildState;\n          return getNextState(prevState, _objectSpread({}, state, {\n            routes: _routes\n          }));\n        }\n      }\n\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && shouldBackNavigateToInitialRoute) {\n          activeChildIndex = initialRouteIndex;\n        } else {\n          return state;\n        }\n      }\n\n      var didNavigate = false;\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState;\n\n          if (action.action) {\n            newChildState = childRouter ? childRouter.getStateForAction(action.action, childState) : null;\n          } else if (!action.action && action.params) {\n            newChildState = _objectSpread({}, childState, {\n              params: _objectSpread({}, childState.params || {}, {}, action.params)\n            });\n          }\n\n          if (newChildState && newChildState !== childState) {\n            var _routes2 = _toConsumableArray(state.routes);\n\n            _routes2[activeChildIndex] = newChildState;\n            return getNextState(prevState, _objectSpread({}, state, {\n              routes: _routes2,\n              index: activeChildIndex\n            }));\n          } else if (!newChildState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var _params = _objectSpread({}, lastRoute.params, {}, action.params);\n\n          var _routes3 = _toConsumableArray(state.routes);\n\n          _routes3[state.routes.indexOf(lastRoute)] = _objectSpread({}, lastRoute, {\n            params: _params\n          });\n          return getNextState(prevState, _objectSpread({}, state, {\n            routes: _routes3\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(prevState, _objectSpread({}, state, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _objectSpread({}, state);\n      }\n\n      var index = state.index;\n      var routes = state.routes;\n      order.find(function (childId, i) {\n        var childRouter = childRouters[childId];\n\n        if (i === index) {\n          return false;\n        }\n\n        var childState = routes[i];\n\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n\n        if (!childState) {\n          index = i;\n          return true;\n        }\n\n        if (childState !== routes[i]) {\n          routes = _toConsumableArray(routes);\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n\n        return false;\n      });\n\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(prevState, _objectSpread({}, state, {\n          index: index,\n          routes: routes\n        }));\n      }\n\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      invariant(routeName, \"There is no route defined for index \" + state.index + \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\");\n      var childRouter = childRouters[routeName];\n\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, config.navigationOptions)\n  };\n});","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/routers/SwitchRouter.js"],"names":["invariant","getScreenForRouteName","createConfigGetter","NavigationActions","StackActions","validateRouteConfigMap","createPathParser","defaultActionCreators","route","navStateKey","childrenUpdateWithoutSwitchingIndex","actionType","SET_PARAMS","COMPLETE_TRANSITION","includes","routeConfigs","config","order","Object","keys","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","shouldBackNavigateToInitialRoute","resetOnBlur","hasOwnProperty","initialRouteIndex","indexOf","childRouters","forEach","routeName","routeConfig","screen","router","paths","getPathAndParamsForRoute","getActionForPathAndParams","Error","map","n","join","resetChildRoute","params","undefined","childRouter","childAction","init","getStateForAction","key","getNextState","prevState","possibleNextState","nextState","index","prevRouteName","routes","nextRoutes","getInitialState","isTransitioning","getActionCreators","stateKey","action","inputState","state","activeChildIndex","type","INIT","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","BACK","didNavigate","NAVIGATE","find","childId","i","childState","newChildState","lastRoute","getComponentForState","getComponentForRouteName","getPathAndParamsForState","path","getScreenOptions","navigationOptions"],"mappings":"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","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport NavigationActions from '../NavigationActions';\nimport StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = (route, navStateKey) => ({});\n\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [\n    NavigationActions.SET_PARAMS,\n    // Todo: make SwitchRouter not depend on StackActions..\n    StackActions.COMPLETE_TRANSITION,\n  ].includes(actionType);\n}\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  const childRouters = {};\n  order.forEach(routeName => {\n    const routeConfig = routeConfigs[routeName];\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config.paths);\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  function resetChildRoute(routeName) {\n    const params =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  function getNextState(prevState, possibleNextState) {\n    if (!prevState) {\n      return possibleNextState;\n    }\n\n    let nextState;\n    if (prevState.index !== possibleNextState.index && resetOnBlur) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n\n      return {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    } else {\n      nextState = possibleNextState;\n    }\n\n    return nextState;\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    return {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false,\n    };\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && shouldBackNavigateToInitialRoute) {\n          activeChildIndex = initialRouteIndex;\n        } else {\n          return state;\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState;\n\n          if (action.action) {\n            newChildState = childRouter\n              ? childRouter.getStateForAction(action.action, childState)\n              : null;\n          } else if (!action.action && action.params) {\n            newChildState = {\n              ...childState,\n              params: {\n                ...(childState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState && newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            return getNextState(prevState, {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            });\n          } else if (\n            !newChildState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      // Let other children handle it and switch to the first child that returns a new state\n      let index = state.index;\n      let routes = state.routes;\n      order.find((childId, i) => {\n        const childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        let childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = [...routes];\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n\n      // Nested routers can be updated after switching children with actions such as SET_PARAMS\n      // and COMPLETE_TRANSITION.\n      // NOTE: This may be problematic with custom routers because we whitelist the actions\n      // that can be handled by child routers without automatically changing index.\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(prevState, {\n          ...state,\n          index,\n          routes,\n        });\n      }\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.navigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}