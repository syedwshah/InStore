{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport withNavigation from \"./withNavigation\";\nvar EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nvar EventNames = Object.keys(EventNameToPropName);\n\nvar NavigationEvents = function (_React$Component) {\n  _inherits(NavigationEvents, _React$Component);\n\n  var _super = _createSuper(NavigationEvents);\n\n  function NavigationEvents() {\n    var _this;\n\n    _classCallCheck(this, NavigationEvents);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.addListener = function (eventName) {\n      var listener = _this.props[EventNameToPropName[eventName]];\n\n      if (listener) {\n        _this.subscriptions[eventName] = _this.props.navigation.addListener(eventName, listener);\n      }\n    };\n\n    _this.removeListener = function (eventName) {\n      if (_this.subscriptions[eventName]) {\n        _this.subscriptions[eventName].remove();\n\n        _this.subscriptions[eventName] = undefined;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(NavigationEvents, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscriptions = {};\n      EventNames.forEach(this.addListener);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      EventNames.forEach(function (eventName) {\n        var listenerHasChanged = _this2.props[EventNameToPropName[eventName]] !== prevProps[EventNameToPropName[eventName]];\n\n        if (listenerHasChanged) {\n          _this2.removeListener(eventName);\n\n          _this2.addListener(eventName);\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      EventNames.forEach(this.removeListener);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return NavigationEvents;\n}(React.Component);\n\nexport default withNavigation(NavigationEvents);","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/NavigationEvents.js"],"names":["React","withNavigation","EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","addListener","eventName","listener","props","subscriptions","navigation","removeListener","remove","undefined","forEach","prevProps","listenerHasChanged","Component"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP;AAEA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,SAAS,EAAE,aADe;AAE1BC,EAAAA,QAAQ,EAAE,YAFgB;AAG1BC,EAAAA,QAAQ,EAAE,YAHgB;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA5B;AAOA,IAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYP,mBAAZ,CAAnB;;IAEMQ,gB;;;;;;;;;;;;;;;;UAsBJC,W,GAAc,UAAAC,SAAS,EAAI;AACzB,UAAMC,QAAQ,GAAG,MAAKC,KAAL,CAAWZ,mBAAmB,CAACU,SAAD,CAA9B,CAAjB;;AACA,UAAIC,QAAJ,EAAc;AACZ,cAAKE,aAAL,CAAmBH,SAAnB,IAAgC,MAAKE,KAAL,CAAWE,UAAX,CAAsBL,WAAtB,CAC9BC,SAD8B,EAE9BC,QAF8B,CAAhC;AAID;AACF,K;;UAEDI,c,GAAiB,UAAAL,SAAS,EAAI;AAC5B,UAAI,MAAKG,aAAL,CAAmBH,SAAnB,CAAJ,EAAmC;AACjC,cAAKG,aAAL,CAAmBH,SAAnB,EAA8BM,MAA9B;;AACA,cAAKH,aAAL,CAAmBH,SAAnB,IAAgCO,SAAhC;AACD;AACF,K;;;;;;;wCApCmB;AAClB,WAAKJ,aAAL,GAAqB,EAArB;AACAR,MAAAA,UAAU,CAACa,OAAX,CAAmB,KAAKT,WAAxB;AACD;;;uCAEkBU,S,EAAW;AAAA;;AAC5Bd,MAAAA,UAAU,CAACa,OAAX,CAAmB,UAAAR,SAAS,EAAI;AAC9B,YAAMU,kBAAkB,GACtB,MAAI,CAACR,KAAL,CAAWZ,mBAAmB,CAACU,SAAD,CAA9B,MACAS,SAAS,CAACnB,mBAAmB,CAACU,SAAD,CAApB,CAFX;;AAGA,YAAIU,kBAAJ,EAAwB;AACtB,UAAA,MAAI,CAACL,cAAL,CAAoBL,SAApB;;AACA,UAAA,MAAI,CAACD,WAAL,CAAiBC,SAAjB;AACD;AACF,OARD;AASD;;;2CAEsB;AACrBL,MAAAA,UAAU,CAACa,OAAX,CAAmB,KAAKH,cAAxB;AACD;;;6BAmBQ;AACP,aAAO,IAAP;AACD;;;;EAzC4BjB,KAAK,CAACuB,S;;AA4CrC,eAAetB,cAAc,CAACS,gBAAD,CAA7B","sourcesContent":["import React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    this.subscriptions = {};\n    EventNames.forEach(this.addListener);\n  }\n\n  componentDidUpdate(prevProps) {\n    EventNames.forEach(eventName => {\n      const listenerHasChanged =\n        this.props[EventNameToPropName[eventName]] !==\n        prevProps[EventNameToPropName[eventName]];\n      if (listenerHasChanged) {\n        this.removeListener(eventName);\n        this.addListener(eventName);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(this.removeListener);\n  }\n\n  addListener = eventName => {\n    const listener = this.props[EventNameToPropName[eventName]];\n    if (listener) {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        listener\n      );\n    }\n  };\n\n  removeListener = eventName => {\n    if (this.subscriptions[eventName]) {\n      this.subscriptions[eventName].remove();\n      this.subscriptions[eventName] = undefined;\n    }\n  };\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"module"}