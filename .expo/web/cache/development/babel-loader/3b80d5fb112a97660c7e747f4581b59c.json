{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-native-tab-view/src/TouchableItem.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nvar LOLLIPOP = 21;\n\nvar TouchableItem = function (_React$Component) {\n  _inherits(TouchableItem, _React$Component);\n\n  var _super = _createSuper(TouchableItem);\n\n  function TouchableItem() {\n    var _this;\n\n    _classCallCheck(this, TouchableItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._handlePress = function () {\n      global.requestAnimationFrame(_this.props.onPress);\n    };\n\n    return _this;\n  }\n\n  _createClass(TouchableItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          pressOpacity = _this$props.pressOpacity,\n          pressColor = _this$props.pressColor,\n          borderless = _this$props.borderless,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"pressOpacity\", \"pressColor\", \"borderless\"]);\n\n      if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n        return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n          onPress: this._handlePress,\n          background: TouchableNativeFeedback.Ripple(pressColor, borderless),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 9\n          }\n        }), React.createElement(View, {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }\n        }, React.Children.only(this.props.children)));\n      } else {\n        return React.createElement(TouchableOpacity, _extends({}, rest, {\n          onPress: this._handlePress,\n          style: style,\n          activeOpacity: pressOpacity,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 9\n          }\n        }), this.props.children);\n      }\n    }\n  }]);\n\n  return TouchableItem;\n}(React.Component);\n\nTouchableItem.propTypes = {\n  onPress: PropTypes.func.isRequired,\n  delayPressIn: PropTypes.number,\n  borderless: PropTypes.bool,\n  pressColor: PropTypes.string,\n  pressOpacity: PropTypes.number,\n  children: PropTypes.node.isRequired\n};\nTouchableItem.defaultProps = {\n  pressColor: 'rgba(255, 255, 255, .4)'\n};\nexport { TouchableItem as default };","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-native-tab-view/src/TouchableItem.js"],"names":["React","PropTypes","LOLLIPOP","TouchableItem","_handlePress","global","requestAnimationFrame","props","onPress","style","pressOpacity","pressColor","borderless","rest","Platform","OS","Version","TouchableNativeFeedback","Ripple","Children","only","children","Component","propTypes","func","isRequired","delayPressIn","number","bool","string","node","defaultProps"],"mappings":";;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;AASA,IAAMC,QAAQ,GAAG,EAAjB;;IAYqBC,a;;;;;;;;;;;;;;;;UAcnBC,Y,GAAe,YAAM;AACnBC,MAAAA,MAAM,CAACC,qBAAP,CAA6B,MAAKC,KAAL,CAAWC,OAAxC;AACD,K;;;;;;;6BAEQ;AAAA,wBAC0D,KAAKD,KAD/D;AAAA,UACCE,KADD,eACCA,KADD;AAAA,UACQC,YADR,eACQA,YADR;AAAA,UACsBC,UADtB,eACsBA,UADtB;AAAA,UACkCC,UADlC,eACkCA,UADlC;AAAA,UACiDC,IADjD;;AAGP,UAAIC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoBd,QAArD,EAA+D;AAC7D,eACE,oBAAC,uBAAD,eACMW,IADN;AAEE,UAAA,OAAO,EAAE,KAAKT,YAFhB;AAGE,UAAA,UAAU,EAAEa,uBAAuB,CAACC,MAAxB,CAA+BP,UAA/B,EAA2CC,UAA3C,CAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAKE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEH,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAqBT,KAAK,CAACmB,QAAN,CAAeC,IAAf,CAAoB,KAAKb,KAAL,CAAWc,QAA/B,CAArB,CALF,CADF;AASD,OAVD,MAUO;AACL,eACE,oBAAC,gBAAD,eACMR,IADN;AAEE,UAAA,OAAO,EAAE,KAAKT,YAFhB;AAGE,UAAA,KAAK,EAAEK,KAHT;AAIE,UAAA,aAAa,EAAEC,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMG,KAAKH,KAAL,CAAWc,QANd,CADF;AAUD;AACF;;;;EA3CwCrB,KAAK,CAACsB,S;;AAA5BnB,a,CACZoB,S,GAAY;AACjBf,EAAAA,OAAO,EAAEP,SAAS,CAACuB,IAAV,CAAeC,UADP;AAEjBC,EAAAA,YAAY,EAAEzB,SAAS,CAAC0B,MAFP;AAGjBf,EAAAA,UAAU,EAAEX,SAAS,CAAC2B,IAHL;AAIjBjB,EAAAA,UAAU,EAAEV,SAAS,CAAC4B,MAJL;AAKjBnB,EAAAA,YAAY,EAAET,SAAS,CAAC0B,MALP;AAMjBN,EAAAA,QAAQ,EAAEpB,SAAS,CAAC6B,IAAV,CAAeL;AANR,C;AADAtB,a,CAUZ4B,Y,GAAe;AACpBpB,EAAAA,UAAU,EAAE;AADQ,C;SAVHR,a","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  Platform,\n  View,\n} from 'react-native';\nimport type { Style } from './TabViewTypeDefinitions';\n\nconst LOLLIPOP = 21;\n\ntype Props = {\n  onPress: Function,\n  delayPressIn?: number,\n  borderless?: boolean,\n  pressColor?: string,\n  pressOpacity?: number,\n  children?: React.Node,\n  style?: Style,\n};\n\nexport default class TouchableItem extends React.Component<Props> {\n  static propTypes = {\n    onPress: PropTypes.func.isRequired,\n    delayPressIn: PropTypes.number,\n    borderless: PropTypes.bool,\n    pressColor: PropTypes.string,\n    pressOpacity: PropTypes.number,\n    children: PropTypes.node.isRequired,\n  };\n\n  static defaultProps = {\n    pressColor: 'rgba(255, 255, 255, .4)',\n  };\n\n  _handlePress = () => {\n    global.requestAnimationFrame(this.props.onPress);\n  };\n\n  render() {\n    const { style, pressOpacity, pressColor, borderless, ...rest } = this.props;\n\n    if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          onPress={this._handlePress}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else {\n      return (\n        <TouchableOpacity\n          {...rest}\n          onPress={this._handlePress}\n          style={style}\n          activeOpacity={pressOpacity}\n        >\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}