{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/Header/HeaderBackButton.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableItem from \"../TouchableItem\";\n\nvar defaultBackImage = require(\"../assets/back-icon.png\");\n\nvar HeaderBackButton = function (_React$PureComponent) {\n  _inherits(HeaderBackButton, _React$PureComponent);\n\n  var _super = _createSuper(HeaderBackButton);\n\n  function HeaderBackButton() {\n    var _this;\n\n    _classCallCheck(this, HeaderBackButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {};\n\n    _this._onTextLayout = function (e) {\n      if (_this.state.initialTextWidth) {\n        return;\n      }\n\n      _this.setState({\n        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HeaderBackButton, [{\n    key: \"_renderBackImage\",\n    value: function _renderBackImage() {\n      var _this$props = this.props,\n          backImage = _this$props.backImage,\n          title = _this$props.title,\n          tintColor = _this$props.tintColor;\n      var BackImage;\n      var props;\n\n      if (React.isValidElement(backImage)) {\n        return backImage;\n      } else if (backImage) {\n        BackImage = backImage;\n        props = {\n          tintColor: tintColor,\n          title: title\n        };\n      } else {\n        BackImage = Image;\n        props = {\n          style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {\n            tintColor: tintColor\n          }],\n          source: defaultBackImage\n        };\n      }\n\n      return React.createElement(BackImage, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 12\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          onPress = _this$props2.onPress,\n          pressColorAndroid = _this$props2.pressColorAndroid,\n          layoutPreset = _this$props2.layoutPreset,\n          title = _this$props2.title;\n      var button = React.createElement(TouchableItem, {\n        accessibilityComponentType: \"button\",\n        accessibilityLabel: title,\n        accessibilityTraits: \"button\",\n        testID: \"header-back\",\n        delayPressIn: 0,\n        onPress: onPress,\n        pressColor: pressColorAndroid,\n        style: styles.container,\n        borderless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, this._renderBackImage(), this._maybeRenderTitle()));\n\n      if (Platform.OS === 'android') {\n        return React.createElement(View, {\n          style: styles.androidButtonWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 14\n          }\n        }, button);\n      } else {\n        return button;\n      }\n    }\n  }, {\n    key: \"_maybeRenderTitle\",\n    value: function _maybeRenderTitle() {\n      var _this$props3 = this.props,\n          layoutPreset = _this$props3.layoutPreset,\n          backTitleVisible = _this$props3.backTitleVisible,\n          width = _this$props3.width,\n          title = _this$props3.title,\n          titleStyle = _this$props3.titleStyle,\n          tintColor = _this$props3.tintColor,\n          truncatedTitle = _this$props3.truncatedTitle;\n      var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;\n      var backButtonTitle = renderTruncated ? truncatedTitle : title;\n      var titleDefaultsToDisabled = layoutPreset === 'left' || Platform.OS === 'android' || typeof backButtonTitle !== 'string';\n\n      if (titleDefaultsToDisabled && !backTitleVisible) {\n        return null;\n      }\n\n      return React.createElement(Text, {\n        onLayout: this._onTextLayout,\n        style: [styles.title, !!tintColor && {\n          color: tintColor\n        }, titleStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }\n      }, backButtonTitle);\n    }\n  }]);\n\n  return HeaderBackButton;\n}(React.PureComponent);\n\nHeaderBackButton.defaultProps = {\n  pressColorAndroid: 'rgba(0, 0, 0, .32)',\n  tintColor: Platform.select({\n    ios: '#037aff'\n  }),\n  truncatedTitle: 'Back'\n};\nvar styles = StyleSheet.create({\n  androidButtonWrapper: {\n    margin: 13,\n    backgroundColor: 'transparent'\n  },\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: Platform.OS === 'ios' ? {\n    height: 21,\n    width: 13,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  } : {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  iconWithTitle: Platform.OS === 'ios' ? {\n    marginRight: 6\n  } : {}\n});\nexport default HeaderBackButton;","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/Header/HeaderBackButton.js"],"names":["React","TouchableItem","defaultBackImage","require","HeaderBackButton","state","_onTextLayout","e","initialTextWidth","setState","nativeEvent","layout","x","width","props","backImage","title","tintColor","BackImage","isValidElement","Image","style","styles","icon","iconWithTitle","source","onPress","pressColorAndroid","layoutPreset","button","container","_renderBackImage","_maybeRenderTitle","Platform","OS","androidButtonWrapper","backTitleVisible","titleStyle","truncatedTitle","renderTruncated","backButtonTitle","titleDefaultsToDisabled","color","PureComponent","defaultProps","select","ios","StyleSheet","create","margin","backgroundColor","alignItems","flexDirection","fontSize","paddingRight","height","marginLeft","marginRight","marginVertical","resizeMode","transform","scaleX","I18nManager","isRTL"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  I18nManager,\n  Image,\n  Text,\n  View,\n  Platform,\n  StyleSheet,\n} from 'react-native';\n\nimport TouchableItem from '../TouchableItem';\n\nconst defaultBackImage = require('../assets/back-icon.png');\n\nclass HeaderBackButton extends React.PureComponent {\n  static defaultProps = {\n    pressColorAndroid: 'rgba(0, 0, 0, .32)',\n    tintColor: Platform.select({\n      ios: '#037aff',\n    }),\n    truncatedTitle: 'Back',\n  };\n\n  state = {};\n\n  _onTextLayout = e => {\n    if (this.state.initialTextWidth) {\n      return;\n    }\n    this.setState({\n      initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width,\n    });\n  };\n\n  _renderBackImage() {\n    const { backImage, title, tintColor } = this.props;\n\n    let BackImage;\n    let props;\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      BackImage = backImage;\n      props = {\n        tintColor,\n        title,\n      };\n    } else {\n      BackImage = Image;\n      props = {\n        style: [\n          styles.icon,\n          !!title && styles.iconWithTitle,\n          !!tintColor && { tintColor },\n        ],\n        source: defaultBackImage,\n      };\n    }\n\n    return <BackImage {...props} />;\n  }\n\n  render() {\n    const { onPress, pressColorAndroid, layoutPreset, title } = this.props;\n\n    let button = (\n      <TouchableItem\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={title}\n        accessibilityTraits=\"button\"\n        testID=\"header-back\"\n        delayPressIn={0}\n        onPress={onPress}\n        pressColor={pressColorAndroid}\n        style={styles.container}\n        borderless\n      >\n        <View style={styles.container}>\n          {this._renderBackImage()}\n          {this._maybeRenderTitle()}\n        </View>\n      </TouchableItem>\n    );\n\n    if (Platform.OS === 'android') {\n      return <View style={styles.androidButtonWrapper}>{button}</View>;\n    } else {\n      return button;\n    }\n  }\n\n  _maybeRenderTitle() {\n    const {\n      layoutPreset,\n      backTitleVisible,\n      width,\n      title,\n      titleStyle,\n      tintColor,\n      truncatedTitle,\n    } = this.props;\n\n    const renderTruncated =\n      this.state.initialTextWidth && width\n        ? this.state.initialTextWidth > width\n        : false;\n\n    const backButtonTitle = renderTruncated ? truncatedTitle : title;\n\n    // If the left preset is used and we aren't on Android, then we\n    // default to disabling the label\n    const titleDefaultsToDisabled =\n      layoutPreset === 'left' ||\n      Platform.OS === 'android' ||\n      typeof backButtonTitle !== 'string';\n\n    // If the title is explicitly enabled then we respect that\n    if (titleDefaultsToDisabled && !backTitleVisible) {\n      return null;\n    }\n\n    return (\n      <Text\n        onLayout={this._onTextLayout}\n        style={[styles.title, !!tintColor && { color: tintColor }, titleStyle]}\n        numberOfLines={1}\n      >\n        {backButtonTitle}\n      </Text>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  androidButtonWrapper: {\n    margin: 13,\n    backgroundColor: 'transparent',\n  },\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10,\n  },\n  icon:\n    Platform.OS === 'ios'\n      ? {\n          height: 21,\n          width: 13,\n          marginLeft: 9,\n          marginRight: 22,\n          marginVertical: 12,\n          resizeMode: 'contain',\n          transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n        }\n      : {\n          height: 24,\n          width: 24,\n          margin: 3,\n          resizeMode: 'contain',\n          transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n        },\n  iconWithTitle:\n    Platform.OS === 'ios'\n      ? {\n          marginRight: 6,\n        }\n      : {},\n});\n\nexport default HeaderBackButton;\n"]},"metadata":{},"sourceType":"module"}