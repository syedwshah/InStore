{"ast":null,"code":"import get from 'lodash.get';\nexport var lineHeightUtils = function lineHeightUtils(props, fontSize) {\n  var _style = {};\n  var themeLineHeight = get(props, ['theme', 'text', 'lineHeight']);\n  var height = get(props, 'lineH');\n\n  if (typeof height === 'number') {\n    _style.lineHeight = height;\n  } else if (themeLineHeight && typeof fontSize === 'number') {\n    var normal = get(themeLineHeight, 'normal');\n\n    if (typeof normal === 'number') {\n      _style.lineHeight = fontSize * normal;\n    }\n\n    if (height) {\n      var _size;\n\n      if (typeof height === 'string') {\n        _size = themeLineHeight[height];\n      } else if (typeof height === 'number') {\n        _size = height;\n      }\n\n      if (typeof _size === 'number') {\n        _style.lineHeight = fontSize * _size;\n      }\n    }\n  }\n\n  return _style;\n};","map":{"version":3,"sources":["lineHeight.ts"],"names":["lineHeightUtils","_style","themeLineHeight","get","height","normal","fontSize","_size"],"mappings":"AAAA,OAAA,GAAA,MAAA,YAAA;AAUA,OAAO,IAAMA,eAAe,GAAfA,SAAAA,eAAAA,CAAkB,KAAlBA,EAAkB,QAAlBA,EAAwD;AACnE,MAAMC,MAEL,GAFD,EAAA;AAIA,MAAMC,eAAe,GAAGC,GAAG,CAAA,KAAA,EAAQ,CAAA,OAAA,EAAA,MAAA,EAAnC,YAAmC,CAAR,CAA3B;AAEA,MAAMC,MAAM,GAAGD,GAAG,CAAA,KAAA,EAAlB,OAAkB,CAAlB;;AAEA,MAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AAC9BF,IAAAA,MAAM,CAANA,UAAAA,GAAAA,MAAAA;AADF,GAAA,MAEO,IAAIC,eAAe,IAAI,OAAA,QAAA,KAAvB,QAAA,EAAqD;AAC1D,QAAMG,MAAM,GAAGF,GAAG,CAAA,eAAA,EAAlB,QAAkB,CAAlB;;AAEA,QAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AAC9BF,MAAAA,MAAM,CAANA,UAAAA,GAAoBK,QAAQ,GAA5BL,MAAAA;AAGF;;AAAA,QAAA,MAAA,EAAY;AACV,UAAA,KAAA;;AAEA,UAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AAC9BM,QAAAA,KAAK,GAAGL,eAAe,CAAvBK,MAAuB,CAAvBA;AADF,OAAA,MAEO,IAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AACrCA,QAAAA,KAAK,GAALA,MAAAA;AAGF;;AAAA,UAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7BN,QAAAA,MAAM,CAANA,UAAAA,GAAoBK,QAAQ,GAA5BL,KAAAA;AAEH;AACF;AAED;;AAAA,SAAA,MAAA;AAjCK,CAAA","sourcesContent":["import get from 'lodash.get';\n\nimport { ITheme } from '../../types/ITheme';\nimport { LineHeightType } from '../../types/LineHeight';\n\ninterface IProps {\n  theme: ITheme;\n  lineH?: LineHeightType | string | number;\n}\n\nexport const lineHeightUtils = (props: IProps, fontSize?: number) => {\n  const _style: {\n    lineHeight?: number;\n  } = {};\n\n  const themeLineHeight = get(props, ['theme', 'text', 'lineHeight']);\n\n  const height = get(props, 'lineH');\n\n  if (typeof height === 'number') {\n    _style.lineHeight = height;\n  } else if (themeLineHeight && typeof fontSize === 'number') {\n    const normal = get(themeLineHeight, 'normal');\n\n    if (typeof normal === 'number') {\n      _style.lineHeight = fontSize * normal;\n    }\n\n    if (height) {\n      let _size;\n\n      if (typeof height === 'string') {\n        _size = themeLineHeight[height];\n      } else if (typeof height === 'number') {\n        _size = height;\n      }\n\n      if (typeof _size === 'number') {\n        _style.lineHeight = fontSize * _size;\n      }\n    }\n  }\n\n  return _style;\n};\n"]},"metadata":{},"sourceType":"module"}