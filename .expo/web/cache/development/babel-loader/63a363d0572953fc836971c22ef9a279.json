{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar TabNavigationView = function (_React$PureComponent) {\n  _inherits(TabNavigationView, _React$PureComponent);\n\n  var _super = _createSuper(TabNavigationView);\n\n  function TabNavigationView() {\n    var _this;\n\n    _classCallCheck(this, TabNavigationView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index]\n    };\n\n    _this._renderTabBar = function () {\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? BottomTabBar : _this$props$tabBarCom,\n          tabBarOptions = _this$props.tabBarOptions,\n          navigation = _this$props.navigation,\n          screenProps = _this$props.screenProps,\n          getLabelText = _this$props.getLabelText,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getButtonComponent = _this$props.getButtonComponent,\n          getTestID = _this$props.getTestID,\n          renderIcon = _this$props.renderIcon,\n          onTabPress = _this$props.onTabPress;\n      var descriptors = _this.props.descriptors;\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: _this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        getLabelText: getLabelText,\n        getButtonComponent: getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getTestID: getTestID,\n        renderIcon: renderIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 12\n        }\n      }));\n    };\n\n    _this._jumpTo = function (key) {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          onIndexChange = _this$props2.onIndexChange;\n      var index = navigation.state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      onIndexChange(index);\n    };\n\n    return _this;\n  }\n\n  _createClass(TabNavigationView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          renderScene = _this$props3.renderScene,\n          lazy = _this$props3.lazy;\n      var routes = navigation.state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 12\n        }\n      }, React.createElement(View, {\n        style: styles.pages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }, routes.map(function (route, index) {\n        if (lazy && !loaded.includes(index)) {\n          return null;\n        }\n\n        var isFocused = navigation.state.index === index;\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: [StyleSheet.absoluteFill, {\n            opacity: isFocused ? 1 : 0\n          }],\n          isVisible: isFocused,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 18\n          }\n        }, renderScene({\n          route: route\n        }));\n      })), this._renderTabBar());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return TabNavigationView;\n}(React.PureComponent);\n\nTabNavigationView.defaultProps = {\n  lazy: true\n};\npolyfill(TabNavigationView);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js"],"names":["React","polyfill","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","state","loaded","props","navigation","index","_renderTabBar","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getButtonComponent","getTestID","renderIcon","onTabPress","descriptors","route","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","renderScene","lazy","styles","container","pages","map","includes","isFocused","StyleSheet","absoluteFill","opacity","nextProps","prevState","PureComponent","defaultProps","create","flex","overflow"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,QAAT,QAAyB,yBAAzB;AACA,OAAOC,kBAAP;AACA,OAAOC,YAAP;AACA,OAAOC,mBAAP;;IAEMC,iB;;;;;;;;;;;;;;;UAcJC,K,GAAQ;AACNC,MAAAA,MAAM,EAAE,CAAC,MAAKC,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BI,KAA7B;AADF,K;;UAIRC,a,GAAgB,YAAM;AAAA,wBAYhB,MAAKH,KAZW;AAAA,8CAElBI,eAFkB;AAAA,UAEDC,eAFC,sCAEiBV,YAFjB;AAAA,UAGlBW,aAHkB,eAGlBA,aAHkB;AAAA,UAIlBL,UAJkB,eAIlBA,UAJkB;AAAA,UAKlBM,WALkB,eAKlBA,WALkB;AAAA,UAMlBC,YANkB,eAMlBA,YANkB;AAAA,UAOlBC,qBAPkB,eAOlBA,qBAPkB;AAAA,UAQlBC,kBARkB,eAQlBA,kBARkB;AAAA,UASlBC,SATkB,eASlBA,SATkB;AAAA,UAUlBC,UAVkB,eAUlBA,UAVkB;AAAA,UAWlBC,UAXkB,eAWlBA,UAXkB;AAAA,UAcZC,WAdY,GAcI,MAAKd,KAdT,CAcZc,WAdY;AAAA,UAeZhB,KAfY,GAeF,MAAKE,KAAL,CAAWC,UAfT,CAeZH,KAfY;AAgBpB,UAAMiB,KAAK,GAAGjB,KAAK,CAACkB,MAAN,CAAalB,KAAK,CAACI,KAAnB,CAAd;AACA,UAAMe,UAAU,GAAGH,WAAW,CAACC,KAAK,CAACG,GAAP,CAA9B;AACA,UAAMC,OAAO,GAAGF,UAAU,CAACE,OAA3B;;AAEA,UAAIA,OAAO,CAACC,aAAR,KAA0B,KAA9B,EAAqC;AACnC,eAAO,IAAP;AACD;;AAED,aAAO,oBAAC,eAAD,eAAqBd,aAArB;AAAoC,QAAA,MAAM,EAAE,MAAKe,OAAjD;AAA0D,QAAA,UAAU,EAAEpB,UAAtE;AAAkF,QAAA,WAAW,EAAEM,WAA/F;AAA4G,QAAA,UAAU,EAAEM,UAAxH;AAAoI,QAAA,YAAY,EAAEL,YAAlJ;AAAgK,QAAA,kBAAkB,EAAEE,kBAApL;AAAwM,QAAA,qBAAqB,EAAED,qBAA/N;AAAsP,QAAA,SAAS,EAAEE,SAAjQ;AAA4Q,QAAA,UAAU,EAAEC,UAAxR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,K;;UAEDS,O,GAAU,UAAAH,GAAG,EAAI;AAAA,yBACuB,MAAKlB,KAD5B;AAAA,UACPC,UADO,gBACPA,UADO;AAAA,UACKqB,aADL,gBACKA,aADL;AAGf,UAAMpB,KAAK,GAAGD,UAAU,CAACH,KAAX,CAAiBkB,MAAjB,CAAwBO,SAAxB,CAAkC,UAAAR,KAAK;AAAA,eAAIA,KAAK,CAACG,GAAN,KAAcA,GAAlB;AAAA,OAAvC,CAAd;AAEAI,MAAAA,aAAa,CAACpB,KAAD,CAAb;AACD,K;;;;;;;6BAEQ;AAAA,yBACmC,KAAKF,KADxC;AAAA,UACCC,UADD,gBACCA,UADD;AAAA,UACauB,WADb,gBACaA,WADb;AAAA,UAC0BC,IAD1B,gBAC0BA,IAD1B;AAAA,UAECT,MAFD,GAEYf,UAAU,CAACH,KAFvB,CAECkB,MAFD;AAAA,UAGCjB,MAHD,GAGY,KAAKD,KAHjB,CAGCC,MAHD;AAKP,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE2B,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGZ,MAAM,CAACa,GAAP,CAAW,UAACd,KAAD,EAAQb,KAAR,EAAkB;AAC9B,YAAIuB,IAAI,IAAI,CAAC1B,MAAM,CAAC+B,QAAP,CAAgB5B,KAAhB,CAAb,EAAqC;AAEnC,iBAAO,IAAP;AACD;;AAED,YAAM6B,SAAS,GAAG9B,UAAU,CAACH,KAAX,CAAiBI,KAAjB,KAA2BA,KAA7C;AAEA,eAAO,oBAAC,mBAAD;AAAqB,UAAA,GAAG,EAAEa,KAAK,CAACG,GAAhC;AAAqC,UAAA,KAAK,EAAE,CAACc,UAAU,CAACC,YAAZ,EAA0B;AAAEC,YAAAA,OAAO,EAAEH,SAAS,GAAG,CAAH,GAAO;AAA3B,WAA1B,CAA5C;AAAuG,UAAA,SAAS,EAAEA,SAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACAP,WAAW,CAAC;AAAET,UAAAA,KAAK,EAALA;AAAF,SAAD,CADX,CAAP;AAGD,OAXE,CADH,CADG,EAeF,KAAKZ,aAAL,EAfE,CAAP;AAiBD;;;6CAtE+BgC,S,EAAWC,S,EAAW;AAAA,UAC5ClC,KAD4C,GAClCiC,SAAS,CAAClC,UAAV,CAAqBH,KADa,CAC5CI,KAD4C;AAGpD,aAAO;AAELH,QAAAA,MAAM,EAAEqC,SAAS,CAACrC,MAAV,CAAiB+B,QAAjB,CAA0B5B,KAA1B,IAAmCkC,SAAS,CAACrC,MAA7C,gCAA0DqC,SAAS,CAACrC,MAApE,IAA4EG,KAA5E;AAFH,OAAP;AAID;;;;EAZ6BV,KAAK,CAAC6C,a;;AAAhCxC,iB,CACGyC,Y,GAAe;AACpBb,EAAAA,IAAI,EAAE;AADc,C;AA6ExBhC,QAAQ,CAACI,iBAAD,CAAR;AAEA,IAAM6B,MAAM,GAAGM,UAAU,CAACO,MAAX,CAAkB;AAC/BZ,EAAAA,SAAS,EAAE;AACTa,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/Bb,EAAAA,KAAK,EAAE;AACLY,IAAAA,IAAI,EAAE;AADD;AALwB,CAAlB,CAAf;AAUA,eAAe9C,kBAAkB,CAACG,iBAAD,CAAjC","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\nimport createTabNavigator from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\nclass TabNavigationView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index]\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getTestID,\n      renderIcon,\n      onTabPress\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return <TabBarComponent {...tabBarOptions} jumpTo={this._jumpTo} navigation={navigation} screenProps={screenProps} onTabPress={onTabPress} getLabelText={getLabelText} getButtonComponent={getButtonComponent} getAccessibilityLabel={getAccessibilityLabel} getTestID={getTestID} renderIcon={renderIcon} />;\n  };\n\n  _jumpTo = key => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return <View style={styles.container}>\n        <View style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const isFocused = navigation.state.index === index;\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                {renderScene({ route })}\n              </ResourceSavingScene>;\n        })}\n        </View>\n        {this._renderTabBar()}\n      </View>;\n  }\n}\n\npolyfill(TabNavigationView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\n\nexport default createTabNavigator(TabNavigationView);"]},"metadata":{},"sourceType":"module"}