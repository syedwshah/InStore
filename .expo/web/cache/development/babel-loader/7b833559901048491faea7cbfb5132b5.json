{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/navigators/createNavigator.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport getChildEventSubscriber from \"../getChildEventSubscriber\";\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  var Navigator = function (_React$Component) {\n    _inherits(Navigator, _React$Component);\n\n    var _super = _createSuper(Navigator);\n\n    function Navigator() {\n      var _this;\n\n      _classCallCheck(this, Navigator);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.state = {\n        descriptors: {},\n        screenProps: _this.props.screenProps\n      };\n      return _this;\n    }\n\n    _createClass(Navigator, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(NavigatorView, _extends({}, this.props, {\n          screenProps: this.state.screenProps,\n          navigation: this.props.navigation,\n          navigationConfig: navigationConfig,\n          descriptors: this.state.descriptors,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 9\n          }\n        }));\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps, prevState) {\n        var prevDescriptors = prevState.descriptors;\n        var navigation = nextProps.navigation,\n            screenProps = nextProps.screenProps;\n        var dispatch = navigation.dispatch,\n            state = navigation.state,\n            addListener = navigation.addListener;\n        var routes = state.routes;\n\n        if (typeof routes === 'undefined') {\n          throw new TypeError('No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');\n        }\n\n        var descriptors = {};\n        routes.forEach(function (route) {\n          if (prevDescriptors && prevDescriptors[route.key] && route === prevDescriptors[route.key].state && screenProps === prevState.screenProps) {\n            descriptors[route.key] = prevDescriptors[route.key];\n            return;\n          }\n\n          var getComponent = router.getComponentForRouteName.bind(null, route.routeName);\n          var childNavigation = navigation.getChildNavigation(route.key);\n          var options = router.getScreenOptions(childNavigation, screenProps);\n          descriptors[route.key] = {\n            key: route.key,\n            getComponent: getComponent,\n            options: options,\n            state: route,\n            navigation: childNavigation\n          };\n        });\n        return {\n          descriptors: descriptors,\n          screenProps: screenProps\n        };\n      }\n    }]);\n\n    return Navigator;\n  }(React.Component);\n\n  Navigator.router = router;\n  Navigator.navigationOptions = null;\n  return polyfill(Navigator);\n}\n\nexport default createNavigator;","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/navigators/createNavigator.js"],"names":["React","polyfill","getChildEventSubscriber","createNavigator","NavigatorView","router","navigationConfig","Navigator","state","descriptors","screenProps","props","navigation","nextProps","prevState","prevDescriptors","dispatch","addListener","routes","TypeError","forEach","route","key","getComponent","getComponentForRouteName","bind","routeName","childNavigation","getChildNavigation","options","getScreenOptions","Component","navigationOptions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport getChildEventSubscriber from '../getChildEventSubscriber';\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    static router = router;\n    static navigationOptions = null;\n\n    state = {\n      descriptors: {},\n      screenProps: this.props.screenProps,\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      const prevDescriptors = prevState.descriptors;\n      const { navigation, screenProps } = nextProps;\n      const { dispatch, state, addListener } = navigation;\n      const { routes } = state;\n      if (typeof routes === 'undefined') {\n        throw new TypeError(\n          'No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop'\n        );\n      }\n\n      const descriptors = {};\n\n      routes.forEach(route => {\n        if (\n          prevDescriptors &&\n          prevDescriptors[route.key] &&\n          route === prevDescriptors[route.key].state &&\n          screenProps === prevState.screenProps\n        ) {\n          descriptors[route.key] = prevDescriptors[route.key];\n          return;\n        }\n        const getComponent = router.getComponentForRouteName.bind(\n          null,\n          route.routeName\n        );\n        const childNavigation = navigation.getChildNavigation(route.key);\n        const options = router.getScreenOptions(childNavigation, screenProps);\n        descriptors[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation,\n        };\n      });\n\n      return { descriptors, screenProps };\n    }\n\n    render() {\n      return (\n        <NavigatorView\n          {...this.props}\n          screenProps={this.state.screenProps}\n          navigation={this.props.navigation}\n          navigationConfig={navigationConfig}\n          descriptors={this.state.descriptors}\n        />\n      );\n    }\n  }\n\n  return polyfill(Navigator);\n}\n\nexport default createNavigator;\n"]},"metadata":{},"sourceType":"module"}