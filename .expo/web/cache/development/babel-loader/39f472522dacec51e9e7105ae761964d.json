{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport validateScreenOptions from \"./validateScreenOptions\";\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread({}, navigationOptions, {}, configurer(_objectSpread({}, configProps, {\n      navigationOptions: navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread({}, navigationOptions, {}, configurer);\n  }\n\n  return navigationOptions;\n}\n\nexport default (function (routeConfigs, navigatorScreenConfig) {\n  return function (navigation, screenProps) {\n    var state = navigation.state,\n        dispatch = navigation.dispatch;\n    var route = state;\n    invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n    var Component = getScreenForRouteName(routeConfigs, route.routeName);\n    var routeConfig = routeConfigs[route.routeName];\n    var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n    var componentScreenConfig = Component.navigationOptions;\n    var configOptions = {\n      navigation: navigation,\n      screenProps: screenProps || {}\n    };\n    var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n    validateScreenOptions(outputConfig, route);\n    return outputConfig;\n  };\n});","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/routers/createConfigGetter.js"],"names":["invariant","getScreenForRouteName","validateScreenOptions","applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","state","dispatch","route","routeName","Component","routeConfig","routeScreenConfig","componentScreenConfig","configOptions","outputConfig"],"mappings":";;;;;;AAAA,OAAOA,SAAP;AAEA,OAAOC,qBAAP;AACA,OAAOC,qBAAP;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,WAApD,EAAiE;AAC/D,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,6BACKC,iBADL,MAEKD,UAAU,mBACRE,WADQ;AAEXD,MAAAA,iBAAiB,EAAjBA;AAFW,OAFf;AAOD;;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,6BACKC,iBADL,MAEKD,UAFL;AAID;;AACD,SAAOC,iBAAP;AACD;;AAED,gBAAe,UAACE,YAAD,EAAeC,qBAAf;AAAA,SAAyC,UACtDC,UADsD,EAEtDC,WAFsD,EAGnD;AAAA,QACKC,KADL,GACyBF,UADzB,CACKE,KADL;AAAA,QACYC,QADZ,GACyBH,UADzB,CACYG,QADZ;AAEH,QAAMC,KAAK,GAAGF,KAAd;AAEAX,IAAAA,SAAS,CACPa,KAAK,CAACC,SAAN,IAAmB,OAAOD,KAAK,CAACC,SAAb,KAA2B,QADvC,EAEP,gEAFO,CAAT;AAKA,QAAMC,SAAS,GAAGd,qBAAqB,CAACM,YAAD,EAAeM,KAAK,CAACC,SAArB,CAAvC;AAEA,QAAME,WAAW,GAAGT,YAAY,CAACM,KAAK,CAACC,SAAP,CAAhC;AAEA,QAAMG,iBAAiB,GACrBD,WAAW,KAAKD,SAAhB,GAA4B,IAA5B,GAAmCC,WAAW,CAACX,iBADjD;AAEA,QAAMa,qBAAqB,GAAGH,SAAS,CAACV,iBAAxC;AAEA,QAAMc,aAAa,GAAG;AAAEV,MAAAA,UAAU,EAAVA,UAAF;AAAcC,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAA1C,KAAtB;AAEA,QAAIU,YAAY,GAAGjB,WAAW,CAACK,qBAAD,EAAwB,EAAxB,EAA4BW,aAA5B,CAA9B;AACAC,IAAAA,YAAY,GAAGjB,WAAW,CACxBe,qBADwB,EAExBE,YAFwB,EAGxBD,aAHwB,CAA1B;AAKAC,IAAAA,YAAY,GAAGjB,WAAW,CAACc,iBAAD,EAAoBG,YAApB,EAAkCD,aAAlC,CAA1B;AAEAjB,IAAAA,qBAAqB,CAACkB,YAAD,EAAeP,KAAf,CAArB;AAEA,WAAOO,YAAP;AACD,GAjCc;AAAA,CAAf","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps\n) => {\n  const { state, dispatch } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}