{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-drawer/dist/views/DrawerSidebar.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationActions, StackActions } from 'react-navigation';\nimport invariant from \"../utils/invariant\";\n\nvar DrawerSidebar = function (_React$PureComponent) {\n  _inherits(DrawerSidebar, _React$PureComponent);\n\n  var _super = _createSuper(DrawerSidebar);\n\n  function DrawerSidebar() {\n    var _this;\n\n    _classCallCheck(this, DrawerSidebar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._getScreenOptions = function (routeKey) {\n      var descriptor = _this.props.descriptors[routeKey];\n      invariant(descriptor.options, 'Cannot access screen descriptor options from drawer sidebar');\n      return descriptor.options;\n    };\n\n    _this._getLabel = function (_ref) {\n      var focused = _ref.focused,\n          tintColor = _ref.tintColor,\n          route = _ref.route;\n\n      var _this$_getScreenOptio = _this._getScreenOptions(route.key),\n          drawerLabel = _this$_getScreenOptio.drawerLabel,\n          title = _this$_getScreenOptio.title;\n\n      if (drawerLabel) {\n        return typeof drawerLabel === 'function' ? drawerLabel({\n          tintColor: tintColor,\n          focused: focused\n        }) : drawerLabel;\n      }\n\n      if (typeof title === 'string') {\n        return title;\n      }\n\n      return route.routeName;\n    };\n\n    _this._renderIcon = function (_ref2) {\n      var focused = _ref2.focused,\n          tintColor = _ref2.tintColor,\n          route = _ref2.route;\n\n      var _this$_getScreenOptio2 = _this._getScreenOptions(route.key),\n          drawerIcon = _this$_getScreenOptio2.drawerIcon;\n\n      if (drawerIcon) {\n        return typeof drawerIcon === 'function' ? drawerIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : drawerIcon;\n      }\n\n      return null;\n    };\n\n    _this._onItemPress = function (_ref3) {\n      var route = _ref3.route,\n          focused = _ref3.focused;\n\n      if (!focused) {\n        var subAction;\n\n        if (route.index != null && route.index !== 0) {\n          subAction = StackActions.reset({\n            index: 0,\n            actions: [NavigationActions.navigate({\n              routeName: route.routes[0].routeName\n            })]\n          });\n        }\n\n        _this.props.navigation.dispatch(NavigationActions.navigate({\n          routeName: route.routeName,\n          action: subAction\n        }));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerSidebar, [{\n    key: \"render\",\n    value: function render() {\n      var ContentComponent = this.props.contentComponent;\n\n      if (!ContentComponent) {\n        return null;\n      }\n\n      var state = this.props.navigation.state;\n      invariant(typeof state.index === 'number', 'should be set');\n      return React.createElement(View, {\n        style: [styles.container, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 12\n        }\n      }, React.createElement(ContentComponent, _extends({}, this.props.contentOptions, {\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        items: state.routes,\n        activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,\n        screenProps: this.props.screenProps,\n        getLabel: this._getLabel,\n        renderIcon: this._renderIcon,\n        onItemPress: this._onItemPress,\n        drawerPosition: this.props.drawerPosition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return DrawerSidebar;\n}(React.PureComponent);\n\nexport default DrawerSidebar;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-drawer/dist/views/DrawerSidebar.js"],"names":["React","NavigationActions","StackActions","invariant","DrawerSidebar","_getScreenOptions","routeKey","descriptor","props","descriptors","options","_getLabel","focused","tintColor","route","key","drawerLabel","title","routeName","_renderIcon","drawerIcon","_onItemPress","subAction","index","reset","actions","navigate","routes","navigation","dispatch","action","ContentComponent","contentComponent","state","styles","container","style","contentOptions","screenProps","drawerPosition","PureComponent","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { NavigationActions, StackActions } from 'react-navigation';\nimport invariant from '../utils/invariant';\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\n\nclass DrawerSidebar extends React.PureComponent {\n  _getScreenOptions = routeKey => {\n    const descriptor = this.props.descriptors[routeKey];\n    invariant(descriptor.options, 'Cannot access screen descriptor options from drawer sidebar');\n    return descriptor.options;\n  };\n\n  _getLabel = ({ focused, tintColor, route }) => {\n    const { drawerLabel, title } = this._getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function' ? drawerLabel({ tintColor, focused }) : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  _renderIcon = ({ focused, tintColor, route }) => {\n    const { drawerIcon } = this._getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function' ? drawerIcon({ tintColor, focused }) : drawerIcon;\n    }\n    return null;\n  };\n\n  _onItemPress = ({ route, focused }) => {\n    if (!focused) {\n      let subAction;\n      // TODO (v3): Revisit and repeal this behavior:\n      // if the child screen is a StackRouter then always navigate to its first screen (see #1914)\n      if (route.index != null && route.index !== 0) {\n        subAction = StackActions.reset({\n          index: 0,\n          actions: [NavigationActions.navigate({\n            routeName: route.routes[0].routeName\n          })]\n        });\n      }\n      this.props.navigation.dispatch(NavigationActions.navigate({\n        routeName: route.routeName,\n        action: subAction\n      }));\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n    if (!ContentComponent) {\n      return null;\n    }\n    const { state } = this.props.navigation;\n    invariant(typeof state.index === 'number', 'should be set');\n    return <View style={[styles.container, this.props.style]}>\n        <ContentComponent {...this.props.contentOptions} navigation={this.props.navigation} descriptors={this.props.descriptors} items={state.routes} activeItemKey={state.routes[state.index] ? state.routes[state.index].key : null} screenProps={this.props.screenProps} getLabel={this._getLabel} renderIcon={this._renderIcon} onItemPress={this._onItemPress} drawerPosition={this.props.drawerPosition} />\n      </View>;\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});"]},"metadata":{},"sourceType":"module"}