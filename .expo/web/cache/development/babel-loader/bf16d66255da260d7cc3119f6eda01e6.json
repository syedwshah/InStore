{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleInterpolator from \"./StackViewStyleInterpolator\";\nimport { supportsImprovedSpringAnimation } from \"../../utils/ReactNativeFeatures\";\nvar IOSTransitionSpec;\n\nif (supportsImprovedSpringAnimation()) {\n  IOSTransitionSpec = {\n    timing: Animated.spring,\n    stiffness: 1000,\n    damping: 500,\n    mass: 3\n  };\n} else {\n  IOSTransitionSpec = {\n    duration: 500,\n    easing: Easing.bezier(0.2833, 0.99, 0.31833, 0.99),\n    timing: Animated.timing\n  };\n}\n\nvar SlideFromRightIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forHorizontal,\n  containerStyle: {\n    backgroundColor: '#000'\n  }\n};\nvar ModalSlideFromBottomIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forVertical,\n  containerStyle: {\n    backgroundColor: '#000'\n  }\n};\nvar FadeInFromBottomAndroid = {\n  transitionSpec: {\n    duration: 350,\n    easing: Easing.out(Easing.poly(5)),\n    timing: Animated.timing\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid\n};\nvar FadeOutToBottomAndroid = {\n  transitionSpec: {\n    duration: 230,\n    easing: Easing.in(Easing.poly(4)),\n    timing: Animated.timing\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid\n};\n\nfunction defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {\n  if (Platform.OS === 'android') {\n    if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {\n      return FadeOutToBottomAndroid;\n    }\n\n    return FadeInFromBottomAndroid;\n  }\n\n  if (isModal) {\n    return ModalSlideFromBottomIOS;\n  }\n\n  return SlideFromRightIOS;\n}\n\nfunction getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {\n  var defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);\n\n  if (transitionConfigurer) {\n    return _objectSpread({}, defaultConfig, {}, transitionConfigurer(transitionProps, prevTransitionProps, isModal));\n  }\n\n  return defaultConfig;\n}\n\nexport default {\n  defaultTransitionConfig: defaultTransitionConfig,\n  getTransitionConfig: getTransitionConfig,\n  SlideFromRightIOS: SlideFromRightIOS,\n  ModalSlideFromBottomIOS: ModalSlideFromBottomIOS,\n  FadeInFromBottomAndroid: FadeInFromBottomAndroid,\n  FadeOutToBottomAndroid: FadeOutToBottomAndroid\n};","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/StackView/StackViewTransitionConfigs.js"],"names":["StyleInterpolator","supportsImprovedSpringAnimation","IOSTransitionSpec","timing","Animated","spring","stiffness","damping","mass","duration","easing","Easing","bezier","SlideFromRightIOS","transitionSpec","screenInterpolator","forHorizontal","containerStyle","backgroundColor","ModalSlideFromBottomIOS","forVertical","FadeInFromBottomAndroid","out","poly","forFadeFromBottomAndroid","FadeOutToBottomAndroid","in","defaultTransitionConfig","transitionProps","prevTransitionProps","isModal","Platform","OS","index","getTransitionConfig","transitionConfigurer","defaultConfig"],"mappings":"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","sourcesContent":["import { Animated, Easing, Platform } from 'react-native';\nimport StyleInterpolator from './StackViewStyleInterpolator';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\n\nlet IOSTransitionSpec;\nif (supportsImprovedSpringAnimation()) {\n  // These are the exact values from UINavigationController's animation configuration\n  IOSTransitionSpec = {\n    timing: Animated.spring,\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n  };\n} else {\n  // This is an approximation of the IOS spring animation using a derived bezier curve\n  IOSTransitionSpec = {\n    duration: 500,\n    easing: Easing.bezier(0.2833, 0.99, 0.31833, 0.99),\n    timing: Animated.timing,\n  };\n}\n\n// Standard iOS navigation transition\nconst SlideFromRightIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forHorizontal,\n  containerStyle: {\n    backgroundColor: '#000',\n  },\n};\n\n// Standard iOS navigation transition for modals\nconst ModalSlideFromBottomIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forVertical,\n  containerStyle: {\n    backgroundColor: '#000',\n  },\n};\n\n// Standard Android navigation transition when opening an Activity\nconst FadeInFromBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_open_enter.xml\n  transitionSpec: {\n    duration: 350,\n    easing: Easing.out(Easing.poly(5)), // decelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid,\n};\n\n// Standard Android navigation transition when closing an Activity\nconst FadeOutToBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_close_exit.xml\n  transitionSpec: {\n    duration: 230,\n    easing: Easing.in(Easing.poly(4)), // accelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid,\n};\n\nfunction defaultTransitionConfig(\n  transitionProps,\n  prevTransitionProps,\n  isModal\n) {\n  if (Platform.OS === 'android') {\n    // Use the default Android animation no matter if the screen is a modal.\n    // Android doesn't have full-screen modals like iOS does, it has dialogs.\n    if (\n      prevTransitionProps &&\n      transitionProps.index < prevTransitionProps.index\n    ) {\n      // Navigating back to the previous screen\n      return FadeOutToBottomAndroid;\n    }\n    return FadeInFromBottomAndroid;\n  }\n  // iOS and other platforms\n  if (isModal) {\n    return ModalSlideFromBottomIOS;\n  }\n  return SlideFromRightIOS;\n}\n\nfunction getTransitionConfig(\n  transitionConfigurer,\n  transitionProps,\n  prevTransitionProps,\n  isModal\n) {\n  const defaultConfig = defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  );\n  if (transitionConfigurer) {\n    return {\n      ...defaultConfig,\n      ...transitionConfigurer(transitionProps, prevTransitionProps, isModal),\n    };\n  }\n  return defaultConfig;\n}\n\nexport default {\n  defaultTransitionConfig,\n  getTransitionConfig,\n  SlideFromRightIOS,\n  ModalSlideFromBottomIOS,\n  FadeInFromBottomAndroid,\n  FadeOutToBottomAndroid,\n};\n"]},"metadata":{},"sourceType":"module"}