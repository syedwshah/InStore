{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/navigators/createKeyboardAwareNavigator.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default (function (Navigator, navigatorConfig) {\n  var _class, _temp;\n\n  return _temp = _class = function (_React$Component) {\n    _inherits(KeyboardAwareNavigator, _React$Component);\n\n    var _super = _createSuper(KeyboardAwareNavigator);\n\n    function KeyboardAwareNavigator() {\n      var _this;\n\n      _classCallCheck(this, KeyboardAwareNavigator);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this._previouslyFocusedTextInput = null;\n\n      _this._handleGestureBegin = function () {\n        _this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n\n        if (_this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(_this._previouslyFocusedTextInput);\n        }\n\n        _this.props.onGestureBegin && _this.props.onGestureBegin();\n      };\n\n      _this._handleGestureCanceled = function () {\n        if (_this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(_this._previouslyFocusedTextInput);\n        }\n\n        _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n      };\n\n      _this._handleGestureFinish = function () {\n        _this._previouslyFocusedTextInput = null;\n        _this.props.onGestureFinish && _this.props.onGestureFinish();\n      };\n\n      _this._handleTransitionStart = function (transitionProps, prevTransitionProps) {\n        if (transitionProps.index !== prevTransitionProps.index) {\n          var currentField = TextInput.State.currentlyFocusedField();\n\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n\n        var onTransitionStart = _this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      };\n\n      return _this;\n    }\n\n    _createClass(KeyboardAwareNavigator, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(Navigator, _extends({}, this.props, {\n          onGestureBegin: this._handleGestureBegin,\n          onGestureCanceled: this._handleGestureCanceled,\n          onGestureFinish: this._handleGestureFinish,\n          onTransitionStart: this._handleTransitionStart,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return KeyboardAwareNavigator;\n  }(React.Component), _class.router = Navigator.router, _temp;\n});","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/navigators/createKeyboardAwareNavigator.js"],"names":["React","Navigator","navigatorConfig","_previouslyFocusedTextInput","_handleGestureBegin","TextInput","State","currentlyFocusedField","blurTextInput","props","onGestureBegin","_handleGestureCanceled","focusTextInput","onGestureCanceled","_handleGestureFinish","onGestureFinish","_handleTransitionStart","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","Component","router"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,gBAAe,UAACC,SAAD,EAAYC,eAAZ;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YAGXC,2BAHW,GAGmB,IAHnB;;AAAA,YAiBXC,mBAjBW,GAiBW,YAAM;AAC1B,cAAKD,2BAAL,GAAmCE,SAAS,CAACC,KAAV,CAAgBC,qBAAhB,EAAnC;;AACA,YAAI,MAAKJ,2BAAT,EAAsC;AACpCE,UAAAA,SAAS,CAACC,KAAV,CAAgBE,aAAhB,CAA8B,MAAKL,2BAAnC;AACD;;AACD,cAAKM,KAAL,CAAWC,cAAX,IAA6B,MAAKD,KAAL,CAAWC,cAAX,EAA7B;AACD,OAvBU;;AAAA,YAyBXC,sBAzBW,GAyBc,YAAM;AAC7B,YAAI,MAAKR,2BAAT,EAAsC;AACpCE,UAAAA,SAAS,CAACC,KAAV,CAAgBM,cAAhB,CAA+B,MAAKT,2BAApC;AACD;;AACD,cAAKM,KAAL,CAAWI,iBAAX,IAAgC,MAAKJ,KAAL,CAAWI,iBAAX,EAAhC;AACD,OA9BU;;AAAA,YAgCXC,oBAhCW,GAgCY,YAAM;AAC3B,cAAKX,2BAAL,GAAmC,IAAnC;AACA,cAAKM,KAAL,CAAWM,eAAX,IAA8B,MAAKN,KAAL,CAAWM,eAAX,EAA9B;AACD,OAnCU;;AAAA,YAqCXC,sBArCW,GAqCc,UAACC,eAAD,EAAkBC,mBAAlB,EAA0C;AAIjE,YAAID,eAAe,CAACE,KAAhB,KAA0BD,mBAAmB,CAACC,KAAlD,EAAyD;AACvD,cAAMC,YAAY,GAAGf,SAAS,CAACC,KAAV,CAAgBC,qBAAhB,EAArB;;AACA,cAAIa,YAAJ,EAAkB;AAChBf,YAAAA,SAAS,CAACC,KAAV,CAAgBE,aAAhB,CAA8BY,YAA9B;AACD;AACF;;AAED,YAAMC,iBAAiB,GACrB,MAAKZ,KAAL,CAAWY,iBAAX,IAAgCnB,eAAe,CAACmB,iBADlD;AAEAA,QAAAA,iBAAiB,IACfA,iBAAiB,CAACJ,eAAD,EAAkBC,mBAAlB,CADnB;AAED,OApDU;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAKF;AACP,eACE,oBAAC,SAAD,eACM,KAAKT,KADX;AAEE,UAAA,cAAc,EAAE,KAAKL,mBAFvB;AAGE,UAAA,iBAAiB,EAAE,KAAKO,sBAH1B;AAIE,UAAA,eAAe,EAAE,KAAKG,oBAJxB;AAKE,UAAA,iBAAiB,EAAE,KAAKE,sBAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD;AAfU;;AAAA;AAAA,IACwBhB,KAAK,CAACsB,SAD9B,UAEJC,MAFI,GAEKtB,SAAS,CAACsB,MAFf;AAAA,CAAf","sourcesContent":["import React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default (Navigator, navigatorConfig) =>\n  class KeyboardAwareNavigator extends React.Component {\n    static router = Navigator.router;\n    _previouslyFocusedTextInput = null;\n\n    render() {\n      return (\n        <Navigator\n          {...this.props}\n          onGestureBegin={this._handleGestureBegin}\n          onGestureCanceled={this._handleGestureCanceled}\n          onGestureFinish={this._handleGestureFinish}\n          onTransitionStart={this._handleTransitionStart}\n        />\n      );\n    }\n\n    _handleGestureBegin = () => {\n      this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    };\n\n    _handleGestureCanceled = () => {\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    };\n\n    _handleGestureFinish = () => {\n      this._previouslyFocusedTextInput = null;\n      this.props.onGestureFinish && this.props.onGestureFinish();\n    };\n\n    _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n      // TODO: We should not even have received the transition start event\n      // in the case where the index did not change, I believe. We\n      // should revisit this after 2.0 release.\n      if (transitionProps.index !== prevTransitionProps.index) {\n        const currentField = TextInput.State.currentlyFocusedField();\n        if (currentField) {\n          TextInput.State.blurTextInput(currentField);\n        }\n      }\n\n      const onTransitionStart =\n        this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n      onTransitionStart &&\n        onTransitionStart(transitionProps, prevTransitionProps);\n    };\n  };\n"]},"metadata":{},"sourceType":"module"}