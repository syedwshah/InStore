{"ast":null,"code":"'use strict';\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  if (format === undefined) {\n    throw new Error('invariant requires an error message argument');\n  }\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-drawer/dist/utils/invariant.js"],"names":["invariant","condition","format","a","b","c","d","e","f","undefined","Error","error","args","argIndex","replace","name","framesToPop"],"mappings":"AASA;;AAaA,eAAe,SAASA,SAAT,CAAmBC,SAAnB,EAA8BC,MAA9B,EAAsCC,CAAtC,EAAyCC,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,EAAkDC,CAAlD,EAAqDC,CAArD,EAAwD;AACrE,MAAIN,MAAM,KAAKO,SAAf,EAA0B;AACxB,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,MAAI,CAACT,SAAL,EAAgB;AACd,QAAIU,KAAJ;;AACA,QAAIT,MAAM,KAAKO,SAAf,EAA0B;AACxBE,MAAAA,KAAK,GAAG,IAAID,KAAJ,CAAU,+HAAV,CAAR;AACD,KAFD,MAEO;AACL,UAAIE,IAAI,GAAG,CAACT,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,CAAX;AACA,UAAIK,QAAQ,GAAG,CAAf;AACAF,MAAAA,KAAK,GAAG,IAAID,KAAJ,CAAUR,MAAM,CAACY,OAAP,CAAe,KAAf,EAAsB;AAAA,eAAMF,IAAI,CAACC,QAAQ,EAAT,CAAV;AAAA,OAAtB,CAAV,CAAR;AACAF,MAAAA,KAAK,CAACI,IAAN,GAAa,qBAAb;AACD;;AAEDJ,IAAAA,KAAK,CAACK,WAAN,GAAoB,CAApB;AACA,UAAML,KAAN;AACD;AACF","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  if (format === undefined) {\n    throw new Error('invariant requires an error message argument');\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}"]},"metadata":{},"sourceType":"module"}