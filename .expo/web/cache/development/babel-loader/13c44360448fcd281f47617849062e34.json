{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-deprecated-tab-navigator/src/views/TabBarTop.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport TabBarIcon from \"./TabBarIcon\";\n\nvar TabBarTop = function (_React$PureComponent) {\n  _inherits(TabBarTop, _React$PureComponent);\n\n  var _super = _createSuper(TabBarTop);\n\n  function TabBarTop() {\n    var _this;\n\n    _classCallCheck(this, TabBarTop);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._renderLabel = function (scene) {\n      var _this$props = _this.props,\n          position = _this$props.position,\n          tabBarPosition = _this$props.tabBarPosition,\n          navigation = _this$props.navigation,\n          activeTintColor = _this$props.activeTintColor,\n          inactiveTintColor = _this$props.inactiveTintColor,\n          showLabel = _this$props.showLabel,\n          upperCaseLabel = _this$props.upperCaseLabel,\n          labelStyle = _this$props.labelStyle,\n          allowFontScaling = _this$props.allowFontScaling;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var index = scene.index;\n      var routes = navigation.state.routes;\n      var inputRange = [-1].concat(_toConsumableArray(routes.map(function (x, i) {\n        return i;\n      })));\n      var outputRange = inputRange.map(function (inputIndex) {\n        return inputIndex === index ? activeTintColor : inactiveTintColor;\n      });\n      var color = position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange\n      });\n      var tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n\n      var label = _this.props.getLabel(_objectSpread({}, scene, {\n        tintColor: tintColor\n      }));\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 9\n          }\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label(_objectSpread({}, scene, {\n          tintColor: tintColor\n        }));\n      }\n\n      return label;\n    };\n\n    _this._renderIcon = function (scene) {\n      var _this$props2 = _this.props,\n          position = _this$props2.position,\n          navigation = _this$props2.navigation,\n          activeTintColor = _this$props2.activeTintColor,\n          inactiveTintColor = _this$props2.inactiveTintColor,\n          renderIcon = _this$props2.renderIcon,\n          showIcon = _this$props2.showIcon,\n          iconStyle = _this$props2.iconStyle;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarIcon, {\n        position: position,\n        navigation: navigation,\n        activeTintColor: activeTintColor,\n        inactiveTintColor: inactiveTintColor,\n        renderIcon: renderIcon,\n        scene: scene,\n        style: [styles.icon, iconStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this._handleOnPress = function (scene) {\n      var _this$props3 = _this.props,\n          getOnPress = _this$props3.getOnPress,\n          jumpToIndex = _this$props3.jumpToIndex,\n          navigation = _this$props3.navigation;\n      var previousScene = navigation.state.routes[navigation.state.index];\n      var onPress = getOnPress(previousScene, scene);\n\n      if (onPress) {\n        onPress({\n          previousScene: previousScene,\n          scene: scene,\n          jumpToIndex: jumpToIndex,\n          defaultHandler: jumpToIndex\n        });\n      } else {\n        jumpToIndex(scene.index);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TabBarTop, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return React.createElement(TabBar, _extends({}, props, {\n        onTabPress: this._handleOnPress,\n        jumpToIndex: function jumpToIndex() {},\n        renderIcon: this._renderIcon,\n        renderLabel: this._renderLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return TabBarTop;\n}(React.PureComponent);\n\nTabBarTop.defaultProps = {\n  activeTintColor: '#fff',\n  inactiveTintColor: '#fff',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n};\nexport { TabBarTop as default };\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-deprecated-tab-navigator/src/views/TabBarTop.js"],"names":["React","TabBar","TabBarIcon","TabBarTop","_renderLabel","scene","props","position","tabBarPosition","navigation","activeTintColor","inactiveTintColor","showLabel","upperCaseLabel","labelStyle","allowFontScaling","index","routes","state","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","focused","label","getLabel","styles","toUpperCase","_renderIcon","renderIcon","showIcon","iconStyle","icon","_handleOnPress","getOnPress","jumpToIndex","previousScene","onPress","defaultHandler","PureComponent","defaultProps","StyleSheet","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport TabBarIcon from './TabBarIcon';\n\nexport default class TabBarTop extends React.PureComponent {\n  static defaultProps = {\n    activeTintColor: '#fff',\n    inactiveTintColor: '#fff',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = scene => {\n    const {\n      position,\n      tabBarPosition,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n    if (showLabel === false) {\n      return null;\n    }\n    const { index } = scene;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x, i) => i)];\n    const outputRange = inputRange.map(\n      inputIndex => (inputIndex === index ? activeTintColor : inactiveTintColor)\n    );\n    const color = position.interpolate({\n      inputRange,\n      outputRange: outputRange,\n    });\n\n    const tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n    const label = this.props.getLabel({ ...scene, tintColor });\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}>\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n    if (typeof label === 'function') {\n      return label({ ...scene, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderIcon = scene => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      showIcon,\n      iconStyle,\n    } = this.props;\n    if (showIcon === false) {\n      return null;\n    }\n    return (\n      <TabBarIcon\n        position={position}\n        navigation={navigation}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={renderIcon}\n        scene={scene}\n        style={[styles.icon, iconStyle]}\n      />\n    );\n  };\n\n  _handleOnPress = scene => {\n    const { getOnPress, jumpToIndex, navigation } = this.props;\n    const previousScene = navigation.state.routes[navigation.state.index];\n    const onPress = getOnPress(previousScene, scene);\n\n    if (onPress) {\n      // To maintain the same API as `TabbarBottom`, we pass in a `defaultHandler`\n      // even though I don't believe in this case it should be any different\n      // than `jumpToIndex`.\n      onPress({\n        previousScene,\n        scene,\n        jumpToIndex,\n        defaultHandler: jumpToIndex,\n      });\n    } else {\n      jumpToIndex(scene.index);\n    }\n  };\n\n  render() {\n    // TODO: Define full proptypes\n    const props = this.props;\n\n    return (\n      <TabBar\n        {...props}\n        onTabPress={this._handleOnPress}\n        jumpToIndex={() => {}}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}