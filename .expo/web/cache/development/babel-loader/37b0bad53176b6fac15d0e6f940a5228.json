{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/withOrientation.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nexport var isOrientationLandscape = function isOrientationLandscape(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width > height;\n};\nexport default function (WrappedComponent) {\n  var withOrientation = function (_React$Component) {\n    _inherits(withOrientation, _React$Component);\n\n    var _super = _createSuper(withOrientation);\n\n    function withOrientation() {\n      var _this;\n\n      _classCallCheck(this, withOrientation);\n\n      _this = _super.call(this);\n\n      _this.handleOrientationChange = function (_ref2) {\n        var window = _ref2.window;\n        var isLandscape = isOrientationLandscape(window);\n\n        _this.setState({\n          isLandscape: isLandscape\n        });\n      };\n\n      var _isLandscape = isOrientationLandscape(Dimensions.get('window'));\n\n      _this.state = {\n        isLandscape: _isLandscape\n      };\n      return _this;\n    }\n\n    _createClass(withOrientation, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        Dimensions.addEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        Dimensions.removeEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(WrappedComponent, _extends({}, this.props, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 14\n          }\n        }));\n      }\n    }]);\n\n    return withOrientation;\n  }(React.Component);\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation/src/views/withOrientation.js"],"names":["React","hoistNonReactStatic","isOrientationLandscape","width","height","WrappedComponent","withOrientation","handleOrientationChange","window","isLandscape","setState","Dimensions","get","state","addEventListener","removeEventListener","props","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,mBAAP,MAAgC,yBAAhC;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,MAAV,QAAUA,MAAV;AAAA,SAAuBD,KAAK,GAAGC,MAA/B;AAAA,CAA/B;AAEP,eAAe,UAASC,gBAAT,EAA2B;AAAA,MAClCC,eADkC;AAAA;;AAAA;;AAEtC,+BAAc;AAAA;;AAAA;;AACZ;;AADY,YAedC,uBAfc,GAeY,iBAAgB;AAAA,YAAbC,MAAa,SAAbA,MAAa;AACxC,YAAMC,WAAW,GAAGP,sBAAsB,CAACM,MAAD,CAA1C;;AACA,cAAKE,QAAL,CAAc;AAAED,UAAAA,WAAW,EAAXA;AAAF,SAAd;AACD,OAlBa;;AAGZ,UAAMA,YAAW,GAAGP,sBAAsB,CAACS,UAAU,CAACC,GAAX,CAAe,QAAf,CAAD,CAA1C;;AACA,YAAKC,KAAL,GAAa;AAAEJ,QAAAA,WAAW,EAAXA;AAAF,OAAb;AAJY;AAKb;;AAPqC;AAAA;AAAA,0CASlB;AAClBE,QAAAA,UAAU,CAACG,gBAAX,CAA4B,QAA5B,EAAsC,KAAKP,uBAA3C;AACD;AAXqC;AAAA;AAAA,6CAaf;AACrBI,QAAAA,UAAU,CAACI,mBAAX,CAA+B,QAA/B,EAAyC,KAAKR,uBAA9C;AACD;AAfqC;AAAA;AAAA,+BAsB7B;AACP,eAAO,oBAAC,gBAAD,eAAsB,KAAKS,KAA3B,EAAsC,KAAKH,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AAxBqC;;AAAA;AAAA,IACVb,KAAK,CAACiB,SADI;;AA2BxC,SAAOhB,mBAAmB,CAACK,eAAD,EAAkBD,gBAAlB,CAA1B;AACD","sourcesContent":["import React from 'react';\nimport { Dimensions } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nexport const isOrientationLandscape = ({ width, height }) => width > height;\n\nexport default function(WrappedComponent) {\n  class withOrientation extends React.Component {\n    constructor() {\n      super();\n\n      const isLandscape = isOrientationLandscape(Dimensions.get('window'));\n      this.state = { isLandscape };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"module"}