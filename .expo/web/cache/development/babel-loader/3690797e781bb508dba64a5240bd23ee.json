{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentFacebook from \"./ExponentFacebook\";\nexport function logInWithReadPermissionsAsync(options) {\n  return _regeneratorRuntime.async(function logInWithReadPermissionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExponentFacebook.logInWithReadPermissionsAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Facebook', 'logInWithReadPermissionsAsync');\n\n        case 2:\n          if (!options || typeof options !== 'object') {\n            options = {};\n          }\n\n          return _context.abrupt(\"return\", ExponentFacebook.logInWithReadPermissionsAsync(options));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setAutoLogAppEventsEnabledAsync(enabled) {\n  return _regeneratorRuntime.async(function setAutoLogAppEventsEnabledAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentFacebook.setAutoLogAppEventsEnabledAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Facebook', 'setAutoLogAppEventsEnabledAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFacebook.setAutoLogAppEventsEnabledAsync(enabled));\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setAutoInitEnabledAsync(enabled) {\n  return _regeneratorRuntime.async(function setAutoInitEnabledAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentFacebook.setAutoInitEnabledAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Facebook', 'setAutoInitEnabledAsync');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFacebook.setAutoInitEnabledAsync(enabled));\n\n        case 4:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function initializeAsync(appId, appName) {\n  return _regeneratorRuntime.async(function initializeAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExponentFacebook.initializeAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Facebook', 'initializeAsync');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFacebook.initializeAsync(appId, appName));\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setAdvertiserIDCollectionEnabledAsync(enabled) {\n  return _regeneratorRuntime.async(function setAdvertiserIDCollectionEnabledAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExponentFacebook.setAdvertiserIDCollectionEnabledAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Facebook', 'setAdvertiserIDCollectionEnabledAsync');\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFacebook.setAdvertiserIDCollectionEnabledAsync(enabled));\n\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Facebook.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,gBAAP;AAkBA,OAAO,SAAe,6BAAf,CACL,OADK;AAAA;AAAA;AAAA;AAAA;AAAA,cAGA,gBAAgB,CAAC,6BAHjB;AAAA;AAAA;AAAA;;AAAA,gBAIG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,+BAApC,CAJH;;AAAA;AAOL,cAAI,CAAC,OAAD,IAAY,OAAO,OAAP,KAAmB,QAAnC,EAA6C;AAC3C,YAAA,OAAO,GAAG,EAAV;AACD;;AATI,2CAWE,gBAAgB,CAAC,6BAAjB,CAA+C,OAA/C,CAXF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BP,OAAO,SAAe,+BAAf,CAA+C,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,gBAAgB,CAAC,+BADjB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,iCAApC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,gBAAgB,CAAC,+BAAjB,CAAiD,OAAjD,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBP,OAAO,SAAe,uBAAf,CAAuC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,gBAAgB,CAAC,uBADjB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,yBAApC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,gBAAgB,CAAC,uBAAjB,CAAyC,OAAzC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBP,OAAO,SAAe,eAAf,CAA+B,KAA/B,EAA+C,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,gBAAgB,CAAC,eADjB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,iBAApC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,gBAAgB,CAAC,eAAjB,CAAiC,KAAjC,EAAwC,OAAxC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBP,OAAO,SAAe,qCAAf,CAAqD,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,gBAAgB,CAAC,qCADjB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,uCAApC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,gBAAgB,CAAC,qCAAjB,CAAuD,OAAvD,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExponentFacebook from './ExponentFacebook';\n\nexport type FacebookLoginResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      token: string;\n      expires: number;\n      permissions: string[];\n      declinedPermissions: string[];\n    };\n\nexport type FacebookOptions = {\n  permissions?: string[];\n};\n\nexport async function logInWithReadPermissionsAsync(\n  options?: FacebookOptions\n): Promise<FacebookLoginResult> {\n  if (!ExponentFacebook.logInWithReadPermissionsAsync) {\n    throw new UnavailabilityError('Facebook', 'logInWithReadPermissionsAsync');\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {};\n  }\n\n  return ExponentFacebook.logInWithReadPermissionsAsync(options);\n}\n\n/**\n * Sets whether Facebook SDK should log app events. App events involve eg. app installs,\n * app launches (more info [here](https://developers.facebook.com/docs/app-events/getting-started-app-events-android/#auto-events)\n * and [here](https://developers.facebook.com/docs/app-events/getting-started-app-events-ios#auto-events)).\n *\n * In some cases, you may want to disable or delay the collection of automatically logged events,\n * such as to obtain user consent or fulfill legal obligations.\n *\n * This method corresponds to [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-ios#disable-auto-events)\n * and [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-android/#disable-auto-events) native SDK methods.\n *\n * @param enabled Whether automatic events logging of the Facebook SDK should be enabled\n */\nexport async function setAutoLogAppEventsEnabledAsync(enabled: boolean) {\n  if (!ExponentFacebook.setAutoLogAppEventsEnabledAsync) {\n    throw new UnavailabilityError('Facebook', 'setAutoLogAppEventsEnabledAsync');\n  }\n  return await ExponentFacebook.setAutoLogAppEventsEnabledAsync(enabled);\n}\n\n/**\n * Sets whether Facebook SDK should autoinitialize itself. SDK initialization involves eg.\n * fetching app settings from Facebook or a profile of the logged in user.\n * In some cases, you may want to disable or delay the SDK initialization,\n * such as to obtain user consent or fulfill legal obligations.\n *\n * This method corresponds to [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-ios#disable-sdk-initialization)\n * and [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-android/#disable-sdk-initialization) native SDK methods.\n *\n * Note: Even though calling this method with `enabled == true` initialized the Facebook SDK on iOS,\n * it does not on Android and we recommend always calling `initializeAsync` before performing\n * any actions with effects that should be visible to the user (like `loginWithPermissions`).\n *\n * @param enabled Whether autoinitialization of the Facebook SDK should be enabled\n */\nexport async function setAutoInitEnabledAsync(enabled: boolean) {\n  if (!ExponentFacebook.setAutoInitEnabledAsync) {\n    throw new UnavailabilityError('Facebook', 'setAutoInitEnabledAsync');\n  }\n  return await ExponentFacebook.setAutoInitEnabledAsync(enabled);\n}\n\n/**\n * Calling this method ensures that the SDK is initialized.\n * You have to call this method before calling `logInWithReadPermissionsAsync`\n * to ensure that Facebook support is initialized properly.\n *\n * You may or may not provide an optional `appId: string` argument.\n * - If you don't provide it, Facebook SDK will try to use `appId` from native app resources,\n *   If it fails to find one, the promise will be rejected.\n * - If you provide an explicit `appId`, it will override any other source.\n * The same resolution mechanism is applied to `appName`.\n * @param appId An optional Facebook App ID argument\n * @param appName An optional Facebook App Name argument\n */\nexport async function initializeAsync(appId?: string, appName?: string) {\n  if (!ExponentFacebook.initializeAsync) {\n    throw new UnavailabilityError('Facebook', 'initializeAsync');\n  }\n  return await ExponentFacebook.initializeAsync(appId, appName);\n}\n\n/**\n * Whether the Facebook SDK should collect advertiser ID properties, like the Apple IDFA\n * and Android Advertising ID, automatically. Advertiser IDs let you identify and target specific customers.\n * To learn more visit [Facebook documentation](https://developers.facebook.com/docs/app-ads/targeting/mobile-advertiser-ids)\n * describing that topic.\n *\n * In some cases, you may want to disable or delay the collection of `advertiser-id`,\n * such as to obtain user consent or fulfill legal obligations.\n *\n * This method corresponds to [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-ios#disable-advertiser-id)\n * and [this](https://developers.facebook.com/docs/app-events/getting-started-app-events-android/#disable-advertiser-id) native SDK methods.\n * @param enabled Whether `advertiser-id` should be collected\n */\nexport async function setAdvertiserIDCollectionEnabledAsync(enabled: boolean) {\n  if (!ExponentFacebook.setAdvertiserIDCollectionEnabledAsync) {\n    throw new UnavailabilityError('Facebook', 'setAdvertiserIDCollectionEnabledAsync');\n  }\n  return await ExponentFacebook.setAdvertiserIDCollectionEnabledAsync(enabled);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}