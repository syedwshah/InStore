{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView } from 'react-navigation';\nimport TouchableItem from \"./TouchableItem\";\n\nvar DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {\n  var items = _ref.items,\n      activeItemKey = _ref.activeItemKey,\n      activeTintColor = _ref.activeTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      getLabel = _ref.getLabel,\n      renderIcon = _ref.renderIcon,\n      onItemPress = _ref.onItemPress,\n      itemsContainerStyle = _ref.itemsContainerStyle,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle,\n      activeLabelStyle = _ref.activeLabelStyle,\n      inactiveLabelStyle = _ref.inactiveLabelStyle,\n      iconContainerStyle = _ref.iconContainerStyle,\n      drawerPosition = _ref.drawerPosition;\n  return React.createElement(View, {\n    style: [styles.container, itemsContainerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, items.map(function (route, index) {\n    var _ref2;\n\n    var focused = activeItemKey === route.key;\n    var color = focused ? activeTintColor : inactiveTintColor;\n    var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    var scene = {\n      route: route,\n      index: index,\n      focused: focused,\n      tintColor: color\n    };\n    var icon = renderIcon(scene);\n    var label = getLabel(scene);\n    var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return React.createElement(TouchableItem, {\n      key: route.key,\n      onPress: function onPress() {\n        onItemPress({\n          route: route,\n          focused: focused\n        });\n      },\n      delayPressIn: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    }, React.createElement(SafeAreaView, {\n      style: {\n        backgroundColor: backgroundColor\n      },\n      forceInset: (_ref2 = {}, _defineProperty(_ref2, drawerPosition, 'always'), _defineProperty(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty(_ref2, \"vertical\", 'never'), _ref2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      style: [styles.item, itemStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, icon ? React.createElement(View, {\n      style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 23\n      }\n    }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n      style: [styles.label, {\n        color: color\n      }, labelStyle, extraLabelStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 44\n      }\n    }, label) : label)));\n  }));\n};\n\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default DrawerNavigatorItems;","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js"],"names":["React","SafeAreaView","TouchableItem","DrawerNavigatorItems","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","extraLabelStyle","item","inactiveIcon","defaultProps","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  activeLabelStyle,\n  inactiveLabelStyle,\n  iconContainerStyle,\n  drawerPosition\n}) => <View style={[styles.container, itemsContainerStyle]}>\n    {items.map((route, index) => {\n    const focused = activeItemKey === route.key;\n    const color = focused ? activeTintColor : inactiveTintColor;\n    const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    const scene = { route, index, focused, tintColor: color };\n    const icon = renderIcon(scene);\n    const label = getLabel(scene);\n    const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return <TouchableItem key={route.key} onPress={() => {\n      onItemPress({ route, focused });\n    }} delayPressIn={0}>\n          <SafeAreaView style={{ backgroundColor }} forceInset={{\n        [drawerPosition]: 'always',\n        [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n        vertical: 'never'\n      }}>\n            <View style={[styles.item, itemStyle]}>\n              {icon ? <View style={[styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]}>\n                  {icon}\n                </View> : null}\n              {typeof label === 'string' ? <Text style={[styles.label, { color }, labelStyle, extraLabelStyle]}>\n                  {label}\n                </Text> : label}\n            </View>\n          </SafeAreaView>\n        </TouchableItem>;\n  })}\n  </View>;\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\n\nexport default DrawerNavigatorItems;"]},"metadata":{},"sourceType":"module"}