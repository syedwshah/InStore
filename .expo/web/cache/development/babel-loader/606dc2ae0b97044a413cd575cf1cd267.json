{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-tabs/dist/utils/createTabNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, createNavigationContainer, NavigationActions } from 'react-navigation';\nexport default function createTabNavigator(TabView) {\n  var NavigationView = function (_React$Component) {\n    _inherits(NavigationView, _React$Component);\n\n    var _super = _createSuper(NavigationView);\n\n    function NavigationView() {\n      var _this;\n\n      _classCallCheck(this, NavigationView);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _this._renderScene = function (_ref) {\n        var route = _ref.route;\n        var _this$props = _this.props,\n            screenProps = _this$props.screenProps,\n            descriptors = _this$props.descriptors;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 14\n          }\n        });\n      };\n\n      _this._renderIcon = function (_ref2) {\n        var route = _ref2.route,\n            _ref2$focused = _ref2.focused,\n            focused = _ref2$focused === void 0 ? true : _ref2$focused,\n            tintColor = _ref2.tintColor;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused: focused,\n            tintColor: tintColor\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      };\n\n      _this._getButtonComponent = function (_ref3) {\n        var route = _ref3.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarButtonComponent) {\n          return options.tabBarButtonComponent;\n        }\n\n        return null;\n      };\n\n      _this._getLabelText = function (_ref4) {\n        var route = _ref4.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      };\n\n      _this._getAccessibilityLabel = function (_ref5) {\n        var route = _ref5.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n\n        var label = _this._getLabelText({\n          route: route\n        });\n\n        if (typeof label === 'string') {\n          return label;\n        }\n      };\n\n      _this._getTestID = function (_ref6) {\n        var route = _ref6.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      };\n\n      _this._handleTabPress = function (_ref7) {\n        var route = _ref7.route;\n        _this._isTabPress = true;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n            options = descriptor.options;\n\n        var defaultHandler = function defaultHandler() {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {}\n          } else {\n            _this._jumpTo(route.routeName);\n          }\n        };\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n\n      _this._handleIndexChange = function (index) {\n        if (_this._isTabPress) {\n          _this._isTabPress = false;\n          return;\n        }\n\n        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);\n      };\n\n      _this._handleSwipeStart = function () {\n        _this.setState({\n          isSwiping: true\n        });\n      };\n\n      _this._handleSwipeEnd = function () {\n        _this.setState({\n          isSwiping: false\n        });\n      };\n\n      _this._jumpTo = function (routeName) {\n        return _this.props.navigation.dispatch(NavigationActions.navigate({\n          routeName: routeName\n        }));\n      };\n\n      _this._isTabPress = false;\n      return _this;\n    }\n\n    _createClass(NavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n            descriptors = _this$props2.descriptors,\n            navigation = _this$props2.navigation,\n            screenProps = _this$props2.screenProps;\n        var state = navigation.state;\n        var route = state.routes[state.index];\n        var descriptor = descriptors[route.key];\n\n        var options = _objectSpread({}, this.props.navigationConfig, {}, descriptor.options);\n\n        return React.createElement(TabView, _extends({}, options, {\n          getLabelText: this._getLabelText,\n          getButtonComponent: this._getButtonComponent,\n          getAccessibilityLabel: this._getAccessibilityLabel,\n          getTestID: this._getTestID,\n          renderIcon: this._renderIcon,\n          renderScene: this._renderScene,\n          onIndexChange: this._handleIndexChange,\n          onTabPress: this._handleTabPress,\n          navigation: navigation,\n          descriptors: descriptors,\n          screenProps: screenProps,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 14\n          }\n        }));\n      }\n    }]);\n\n    return NavigationView;\n  }(React.Component);\n\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    var navigator = createNavigator(NavigationView, router, config);\n    return createNavigationContainer(navigator);\n  };\n}","map":{"version":3,"sources":["/Users/shah/Desktop/React_Projects/InStore/node_modules/react-navigation-tabs/dist/utils/createTabNavigator.js"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","createNavigationContainer","NavigationActions","createTabNavigator","TabView","NavigationView","_renderScene","route","props","screenProps","descriptors","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","options","tabBarIcon","_getButtonComponent","tabBarButtonComponent","_getLabelText","tabBarLabel","title","routeName","_getAccessibilityLabel","tabBarAccessibilityLabel","label","_getTestID","tabBarTestID","_handleTabPress","_isTabPress","defaultHandler","isFocused","hasOwnProperty","index","dispatch","popToTop","_jumpTo","tabBarOnPress","_handleIndexChange","state","routes","_handleSwipeStart","setState","isSwiping","_handleSwipeEnd","navigate","navigationConfig","Component","config","router","navigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, createNavigationContainer, NavigationActions } from 'react-navigation';\n\nexport default function createTabNavigator(TabView) {\n  class NavigationView extends React.Component {\n    _renderScene = ({ route }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return <SceneView screenProps={screenProps} navigation={descriptor.navigation} component={TabComponent} />;\n    };\n\n    _renderIcon = ({ route, focused = true, tintColor }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({ focused, tintColor }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getButtonComponent = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarButtonComponent) {\n        return options.tabBarButtonComponent;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        return label;\n      }\n    };\n\n    _getTestID = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _handleTabPress = ({ route }) => {\n      this._isTabPress = true;\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = () => {\n        if (navigation.isFocused()) {\n          if (route.hasOwnProperty('index') && route.index > 0) {\n            // If current tab has a nested navigator, pop to top\n            navigation.dispatch(StackActions.popToTop({ key: route.key }));\n          } else {\n            // TODO: do something to scroll to top\n          }\n        } else {\n          this._jumpTo(route.routeName);\n        }\n      };\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = index => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _handleSwipeStart = () => {\n      this.setState({ isSwiping: true });\n    };\n\n    _handleSwipeEnd = () => {\n      this.setState({ isSwiping: false });\n    };\n\n    _jumpTo = routeName => this.props.navigation.dispatch(NavigationActions.navigate({ routeName }));\n\n    _isTabPress = false;\n\n    render() {\n      const { descriptors, navigation, screenProps } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n      const options = {\n        ...this.props.navigationConfig,\n        ...descriptor.options\n      };\n\n      return <TabView {...options} getLabelText={this._getLabelText} getButtonComponent={this._getButtonComponent} getAccessibilityLabel={this._getAccessibilityLabel} getTestID={this._getTestID} renderIcon={this._renderIcon} renderScene={this._renderScene} onIndexChange={this._handleIndexChange} onTabPress={this._handleTabPress} navigation={navigation} descriptors={descriptors} screenProps={screenProps} />;\n    }\n  }\n\n  return (routes, config = {}) => {\n    const router = TabRouter(routes, config);\n    const navigator = createNavigator(NavigationView, router, config);\n\n    return createNavigationContainer(navigator);\n  };\n}"]},"metadata":{},"sourceType":"module"}