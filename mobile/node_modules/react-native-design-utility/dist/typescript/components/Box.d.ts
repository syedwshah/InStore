import * as React from 'react';
import { ViewProps, ViewStyle, StyleProp } from 'react-native';
import { ITheme } from '../types/ITheme';
import { SpaceType } from '../types/Space';
import { DirType, AlignType, JustifyType, SelfType, FlexWrapType } from '../types/Flex';
import { RadiusType } from '../types/Radius';
import { OpacityType } from '../types/OpacityType';
import { PositionType } from '../types/Position';
export interface IInjectedProps {
    theme: ITheme;
}
export interface UtilityBoxProps extends ViewProps {
    style?: StyleProp<ViewStyle>;
    bg?: string;
    center?: boolean;
    o?: OpacityType | number | string;
    h?: number | string;
    w?: number | string;
    f?: number;
    border?: number;
    shadow?: number;
    radius?: RadiusType;
    circle?: number;
    avatar?: boolean;
    dir?: DirType;
    align?: AlignType;
    justify?: JustifyType;
    self?: SelfType;
    flexWrap?: FlexWrapType;
    m?: SpaceType;
    mb?: SpaceType;
    mt?: SpaceType;
    mr?: SpaceType;
    ml?: SpaceType;
    mx?: SpaceType;
    my?: SpaceType;
    p?: SpaceType;
    pb?: SpaceType;
    pt?: SpaceType;
    pr?: SpaceType;
    pl?: SpaceType;
    px?: SpaceType;
    py?: SpaceType;
    position?: PositionType;
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
    rows?: number[];
}
declare const _default: {
    new (props: Readonly<UtilityBoxProps>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<UtilityBoxProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<UtilityBoxProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<UtilityBoxProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<UtilityBoxProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<UtilityBoxProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<UtilityBoxProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<UtilityBoxProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<UtilityBoxProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<UtilityBoxProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: UtilityBoxProps, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<UtilityBoxProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<UtilityBoxProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<UtilityBoxProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<UtilityBoxProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<UtilityBoxProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<UtilityBoxProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<UtilityBoxProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<UtilityBoxProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<UtilityBoxProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextType?: React.Context<any> | undefined;
};
export default _default;
