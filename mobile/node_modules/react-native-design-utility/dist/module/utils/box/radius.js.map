{"version":3,"sources":["radius.ts"],"names":["get","Image","React","radiusUtils","props","_style","themeRadius","radius","circle","avatar","children","newChildren","Children","only","valueOf","cloneElement","style","borderRadius","height","width","_radius","base"],"mappings":"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","sourcesContent":["// TODO: Update this code\n\nimport get from 'lodash.get';\nimport { Image } from 'react-native';\nimport * as React from 'react';\n\nimport { ITheme } from '../../types/ITheme';\nimport { RadiusType } from '../../types/Radius';\n\ninterface IProps {\n  radius?: RadiusType;\n  theme: ITheme;\n  circle?: number;\n  size: {\n    height?: number | string;\n    width?: number | string;\n  };\n  avatar?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const radiusUtils = (props: IProps) => {\n  const _style: {\n    borderRadius?: number;\n    height?: number;\n    width?: number;\n  } = {};\n\n  const themeRadius = get(props, ['theme', 'radius']);\n\n  const radius = get(props, 'radius');\n  const circle = get(props, 'circle');\n  const avatar = get(props, 'avatar');\n  const children = get(props, 'children');\n\n  let newChildren = children;\n\n  if (themeRadius) {\n    if (\n      avatar &&\n      typeof circle === 'number' &&\n      children &&\n      React.Children.only(children).valueOf() === Image\n    ) {\n      // @ts-ignore\n      newChildren = React.cloneElement(React.Children.only(children), {\n        style: {\n          borderRadius: circle / 2,\n          height: circle,\n          width: circle,\n        },\n      });\n      _style.borderRadius = circle / 2;\n      _style.height = circle;\n      _style.width = circle;\n    } else if (typeof circle === 'number') {\n      _style.borderRadius = circle / 2;\n      _style.height = circle;\n      _style.width = circle;\n    } else if (radius) {\n      if (typeof radius === 'string') {\n        const _radius = themeRadius[radius];\n\n        if (_radius) {\n          _style.borderRadius = _radius;\n        } else {\n          if (radius === 'rounded') {\n            const height = get(props, ['size', 'height']);\n            const width = get(props, ['size', 'width']);\n\n            if (typeof height === 'number' && typeof width === 'number') {\n              _style.borderRadius = 99999;\n            }\n          }\n        }\n      } else if (typeof radius === 'boolean') {\n        const base = get(themeRadius, 'base');\n\n        if (base) {\n          _style.borderRadius = base;\n        }\n      } else if (typeof radius === 'number') {\n        _style.borderRadius = radius;\n      }\n    }\n  }\n\n  return {\n    style: _style,\n    children: newChildren,\n  };\n};\n"]}