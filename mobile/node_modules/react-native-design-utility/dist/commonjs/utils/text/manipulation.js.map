{"version":3,"sources":["manipulation.ts"],"names":["capitalizeText","str","charAt","toUpperCase","slice","capitalizeEachWords","split","map","join","trim","thousandSeparator","String","replace","manipulationUtils","props","newChild","children","uppercase","lowercase","capitalize","capitalizeEach","thousand","toLowerCase"],"mappings":"6KAAA,0DAGA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,GAAD,QACrBA,CAAAA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,GAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CADT,EAAvB,CAGA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACJ,GAAD,QAC1BA,CAAAA,GAAG,CACAK,KADH,CACS,GADT,EAEGC,GAFH,CAEOP,cAFP,EAGGQ,IAHH,CAGQ,GAHR,EAIGC,IAJH,EAD0B,EAA5B,CAOA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACT,GAAD,QACxBU,CAAAA,MAAM,CAACV,GAAD,CAAN,CAAYW,OAAZ,CAAoB,uBAApB,CAA6C,GAA7C,CADwB,EAA1B,CAYO,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAmB,CAClD,GAAIC,CAAAA,QAAQ,CAAGD,KAAK,CAACE,QAArB,CAEA,GAAI,MAAOF,CAAAA,KAAK,CAACE,QAAb,GAA0B,QAA9B,CAAwC,CACtC,GAAMC,CAAAA,SAAS,CAAG,oBAAIH,KAAJ,CAAW,WAAX,CAAlB,CACA,GAAMI,CAAAA,SAAS,CAAG,oBAAIJ,KAAJ,CAAW,WAAX,CAAlB,CACA,GAAMK,CAAAA,UAAU,CAAG,oBAAIL,KAAJ,CAAW,YAAX,CAAnB,CACA,GAAMM,CAAAA,cAAc,CAAG,oBAAIN,KAAJ,CAAW,gBAAX,CAAvB,CACA,GAAMO,CAAAA,QAAQ,CAAG,oBAAIP,KAAJ,CAAW,UAAX,CAAjB,CAEA,GAAIG,SAAJ,CAAe,CACbF,QAAQ,CAAGD,KAAK,CAACE,QAAN,CAAeb,WAAf,EAAX,CACD,CAED,GAAIe,SAAJ,CAAe,CACbH,QAAQ,CAAGD,KAAK,CAACE,QAAN,CAAeM,WAAf,EAAX,CACD,CAED,GAAIH,UAAJ,CAAgB,CACdJ,QAAQ,CAAGf,cAAc,CAACc,KAAK,CAACE,QAAP,CAAzB,CACD,CAED,GAAII,cAAJ,CAAoB,CAClBL,QAAQ,CAAGV,mBAAmB,CAACS,KAAK,CAACE,QAAP,CAA9B,CACD,CAED,GAAIK,QAAJ,CAAc,CACZN,QAAQ,CAAGL,iBAAiB,CAACI,KAAK,CAACE,QAAP,CAA5B,CACD,CACF,CAED,MAAOD,CAAAA,QAAP,CACD,CAhCM,C","sourcesContent":["import get from 'lodash.get';\nimport React from 'react';\n\nconst capitalizeText = (str: string) =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nconst capitalizeEachWords = (str: string) =>\n  str\n    .split(' ')\n    .map(capitalizeText)\n    .join(' ')\n    .trim();\n\nconst thousandSeparator = (str: string | number) =>\n  String(str).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\ninterface IProps {\n  capitalize?: boolean;\n  capitalizeEach?: boolean;\n  uppercase?: boolean;\n  lowercase?: boolean;\n  thousand?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const manipulationUtils = (props: IProps) => {\n  let newChild = props.children;\n\n  if (typeof props.children === 'string') {\n    const uppercase = get(props, 'uppercase');\n    const lowercase = get(props, 'lowercase');\n    const capitalize = get(props, 'capitalize');\n    const capitalizeEach = get(props, 'capitalizeEach');\n    const thousand = get(props, 'thousand');\n\n    if (uppercase) {\n      newChild = props.children.toUpperCase();\n    }\n\n    if (lowercase) {\n      newChild = props.children.toLowerCase();\n    }\n\n    if (capitalize) {\n      newChild = capitalizeText(props.children);\n    }\n\n    if (capitalizeEach) {\n      newChild = capitalizeEachWords(props.children);\n    }\n\n    if (thousand) {\n      newChild = thousandSeparator(props.children);\n    }\n  }\n\n  return newChild;\n};\n"]}